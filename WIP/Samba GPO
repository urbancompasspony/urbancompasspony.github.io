#!/bin/bash

# GPO Generator para Samba AD-DC
# Integração com o sistema existente de compartilhamentos

# Função para gerar UUID único
generate_uuid() {
    if command -v uuidgen >/dev/null 2>&1; then
        uuidgen | tr '[:lower:]' '[:upper:]'
    else
        # Fallback manual se uuidgen não estiver disponível
        cat /proc/sys/kernel/random/uuid | tr '[:lower:]' '[:upper:]'
    fi
}

# Função para obter domínio
get_domain() {
    DOMAIN=$(samba-tool domain info 127.0.0.1 2>/dev/null | grep -i "domain.*:" | head -1 | cut -d: -f2 | tr -d ' ' | tr '[:lower:]' '[:upper:]')
    if [ -z "$DOMAIN" ]; then
        DOMAIN="WORKGROUP"
    fi
    echo "$DOMAIN"
}

# Função para criar estrutura GPO com mapeamento de unidade e atalho
create_gpo_for_share() {
    local share_name="$1"
    local share_path="$2"
    local drive_letter="$3"
    local target_groups="$4"
    local create_shortcut="$5"  # yes/no
    
    if [ -z "$share_name" ] || [ -z "$drive_letter" ]; then
        echo "Erro: Nome do compartilhamento e letra da unidade são obrigatórios"
        return 1
    fi
    
    # Validar letra da unidade
    if ! [[ "$drive_letter" =~ ^[A-Z]$ ]]; then
        echo "Erro: Letra da unidade deve ser uma única letra maiúscula (A-Z)"
        return 1
    fi
    
    local domain_name=$(get_domain)
    local gpo_uuid=$(generate_uuid)
    local gpo_name="MAP_${share_name}_${drive_letter}"
    local server_name=$(hostname | tr '[:lower:]' '[:upper:]')
    
    echo "🎯 CRIANDO GPO PARA COMPARTILHAMENTO"
    echo "═══════════════════════════════════════════════"
    echo "📂 Compartilhamento: $share_name"
    echo "🗂️ Caminho: $share_path"
    echo "💿 Letra da unidade: $drive_letter:"
    echo "👥 Grupos alvo: $target_groups"
    echo "🔗 Criar atalho: $create_shortcut"
    echo "🆔 UUID da GPO: $gpo_uuid"
    echo "📋 Nome da GPO: $gpo_name"
    echo "🌐 Servidor: $server_name"
    echo "🏢 Domínio: $domain_name"
    echo "═══════════════════════════════════════════════"
    echo ""
    
    # Criar diretório da GPO
    local gpo_path="/var/lib/samba/sysvol/${domain_name}/Policies/{${gpo_uuid}}"
    
    echo "📁 Criando estrutura de diretórios..."
    mkdir -p "$gpo_path"
    mkdir -p "$gpo_path/Machine/Preferences/Drives"
    mkdir -p "$gpo_path/Machine/Preferences/Shortcuts"
    mkdir -p "$gpo_path/User/Preferences/Drives"
    mkdir -p "$gpo_path/User/Preferences/Shortcuts"
    
    # 1. CRIAR GPT.INI
    echo "📝 Criando GPT.INI..."
    cat > "$gpo_path/GPT.INI" << EOF
[General]
Version=65536
displayName=$gpo_name
gPCMachineExtensionNames=[{00000000-0000-0000-0000-000000000000}{CAB54552-DEEA-4691-817E-ED4A4D1AFC72}][{AADCED64-746C-4633-A97C-D61349046527}{CAB54552-DEEA-4691-817E-ED4A4D1AFC72}]
gPCUserExtensionNames=[{00000000-0000-0000-0000-000000000000}{CAB54552-DEEA-4691-817E-ED4A4D1AFC72}][{AADCED64-746C-4633-A97C-D61349046527}{CAB54552-DEEA-4691-817E-ED4A4D1AFC72}]
EOF
    
    # 2. CRIAR DRIVES.XML (Mapeamento de unidade)
    echo "💿 Criando mapeamento de unidade..."
    cat > "$gpo_path/User/Preferences/Drives/Drives.xml" << EOF
<?xml version="1.0" encoding="utf-8"?>
<Drives clsid="{8FDDCC1A-0C3C-43cd-A6B4-71A6DF20DA8C}">
    <Drive clsid="{935D1B74-9CB8-4e3c-9914-7DD559B7A417}" name="$drive_letter:" status="$drive_letter:" image="2" changed="$(date -u +%Y-%m-%d\ %H:%M:%S)" uid="{$(generate_uuid)}">
        <Properties action="C" thisDrive="NOCHANGE" allDrives="NOCHANGE" userName="" path="\\\\$server_name\\$share_name" label="$share_name" persistent="1" useLetter="1" letter="$drive_letter"/>
        <Filters>
            <FilterGroup bool="AND" not="0" name="$domain_name\\$target_groups" sid="" userContext="1" primaryGroup="0" localGroup="0"/>
        </Filters>
    </Drive>
</Drives>
EOF
    
    # 3. CRIAR SHORTCUTS.XML (Atalho no desktop) - SE SOLICITADO
    if [ "$create_shortcut" = "yes" ]; then
        echo "🔗 Criando atalho no desktop..."
        cat > "$gpo_path/User/Preferences/Shortcuts/Shortcuts.xml" << EOF
<?xml version="1.0" encoding="utf-8"?>
<Shortcuts clsid="{725D6BBD-4F67-4b83-9C80-BFDE8D7C2140}">
    <Shortcut clsid="{4F2F7C99-3B94-4f5d-8264-E5EB88F5EDE1}" name="$share_name" status="$share_name" image="0" changed="$(date -u +%Y-%m-%d\ %H:%M:%S)" uid="{$(generate_uuid)}">
        <Properties action="C" targetType="FILESYSTEM" targetPath="\\\\$server_name\\$share_name" arguments="" startIn="" comment="Atalho para $share_name" iconIndex="0" iconPath="%SystemRoot%\\system32\\shell32.dll" shortcutKey="0" window="1"/>
        <Filters>
            <FilterGroup bool="AND" not="0" name="$domain_name\\$target_groups" sid="" userContext="1" primaryGroup="0" localGroup="0"/>
        </Filters>
    </Shortcut>
</Shortcuts>
EOF
    fi
    
    # 4. APLICAR PERMISSÕES CORRETAS
    echo "🔐 Aplicando permissões..."
    chmod -R 755 "$gpo_path"
    chown -R root:root "$gpo_path"
    
    # 5. REGISTRAR GPO NO SAMBA
    echo "📋 Registrando GPO no Active Directory..."
    
    # Criar entrada LDAP para a GPO
    ldbedit_script="/tmp/create_gpo_${gpo_uuid}.ldif"
    
    cat > "$ldbedit_script" << EOF
dn: CN={$gpo_uuid},CN=Policies,CN=System,DC=${domain_name//.*/},DC=${domain_name/*./}
objectClass: top
objectClass: container
objectClass: groupPolicyContainer
cn: {$gpo_uuid}
displayName: $gpo_name
flags: 0
gPCFileSysPath: \\\\$server_name\\sysvol\\$domain_name\\Policies\\{$gpo_uuid}
gPCFunctionalityVersion: 2
gPCMachineExtensionNames: [{00000000-0000-0000-0000-000000000000}{CAB54552-DEEA-4691-817E-ED4A4D1AFC72}][{AADCED64-746C-4633-A97C-D61349046527}{CAB54552-DEEA-4691-817E-ED4A4D1AFC72}]
gPCUserExtensionNames: [{00000000-0000-0000-0000-000000000000}{CAB54552-DEEA-4691-817E-ED4A4D1AFC72}][{AADCED64-746C-4633-A97C-D61349046527}{CAB54552-DEEA-4691-817E-ED4A4D1AFC72}]
gPCVersionDirectory: 0
versionNumber: 65536
EOF
    
    # Aplicar no LDAP
    if ldbmodify -H /var/lib/samba/private/sam.ldb "$ldbedit_script" 2>/dev/null; then
        echo "✅ GPO registrada com sucesso no Active Directory"
    else
        echo "⚠️ Falha ao registrar GPO no AD - tentando método alternativo..."
        
        # Método alternativo usando samba-tool
        samba-tool gpo create "$gpo_name" 2>/dev/null || echo "⚠️ Aviso: GPO pode precisar ser vinculada manualmente"
    fi
    
    # Limpar arquivo temporário
    rm -f "$ldbedit_script"
    
    # 6. RECARREGAR CONFIGURAÇÕES DO SAMBA
    echo "🔄 Recarregando configurações..."
    smbcontrol all reload-config 2>/dev/null
    
    echo ""
    echo "🎉 GPO CRIADA COM SUCESSO!"
    echo "════════════════════════════════════════════════════════════════"
    echo "📊 RESUMO DA GPO:"
    echo "   🆔 UUID: {$gpo_uuid}"
    echo "   📋 Nome: $gpo_name"
    echo "   📂 Compartilhamento: \\\\$server_name\\$share_name"
    echo "   💿 Mapeamento: Unidade $drive_letter:"
    echo "   👥 Filtro de segurança: $target_groups"
    echo "   🔗 Atalho no desktop: $create_shortcut"
    echo "   📁 Caminho GPO: $gpo_path"
    echo ""
    echo "📋 PRÓXIMOS PASSOS:"
    echo "   1️⃣ Vincular GPO à OU desejada via RSAT ou samba-tool"
    echo "   2️⃣ Configurar filtro de segurança se necessário"
    echo "   3️⃣ Executar 'gpupdate /force' nos clientes"
    echo ""
    echo "🔧 COMANDOS ÚTEIS:"
    echo "   • Listar GPOs: samba-tool gpo listall"
    echo "   • Vincular GPO: samba-tool gpo setlink <OU> {$gpo_uuid}"
    echo "   • Testar GPO: gpresult /r (no cliente)"
    echo "════════════════════════════════════════════════════════════════"
    
    return 0
}

# Função para listar GPOs existentes
list_gpos() {
    echo "📋 LISTANDO GPOS EXISTENTES"
    echo "═══════════════════════════════"
    
    if command -v samba-tool >/dev/null 2>&1; then
        samba-tool gpo listall 2>/dev/null || echo "⚠️ Erro ao listar GPOs"
    else
        echo "❌ samba-tool não encontrado"
    fi
    
    echo ""
    echo "📁 GPOS NO SISTEMA DE ARQUIVOS:"
    local domain_name=$(get_domain)
    local sysvol_path="/var/lib/samba/sysvol/${domain_name}/Policies"
    
    if [ -d "$sysvol_path" ]; then
        for gpo_dir in "$sysvol_path"/{*}; do
            if [ -d "$gpo_dir" ] && [[ "$(basename "$gpo_dir")" =~ ^\{.*\}$ ]]; then
                local gpo_uuid=$(basename "$gpo_dir")
                local gpt_ini="$gpo_dir/GPT.INI"
                
                if [ -f "$gpt_ini" ]; then
                    local display_name=$(grep "displayName=" "$gpt_ini" | cut -d= -f2-)
                    echo "   🆔 $gpo_uuid"
                    echo "   📋 Nome: ${display_name:-"(sem nome)"}"
                    
                    # Verificar se tem mapeamento de drives
                    if [ -f "$gpo_dir/User/Preferences/Drives/Drives.xml" ]; then
                        local drive_letter=$(grep -o 'letter="[A-Z]"' "$gpo_dir/User/Preferences/Drives/Drives.xml" | cut -d'"' -f2)
                        local share_path=$(grep -o 'path="[^"]*"' "$gpo_dir/User/Preferences/Drives/Drives.xml" | cut -d'"' -f2)
                        echo "   💿 Mapeia: $drive_letter: → $share_path"
                    fi
                    
                    # Verificar se tem atalhos
                    if [ -f "$gpo_dir/User/Preferences/Shortcuts/Shortcuts.xml" ]; then
                        echo "   🔗 Cria atalhos no desktop"
                    fi
                    
                    echo "   ─────────────────────────────────"
                fi
            fi
        done
    else
        echo "❌ Diretório sysvol não encontrado: $sysvol_path"
    fi
}

# Função para remover GPO
remove_gpo() {
    local gpo_uuid="$1"
    
    if [ -z "$gpo_uuid" ]; then
        echo "❌ Erro: UUID da GPO é obrigatório"
        return 1
    fi
    
    # Remover chaves se necessário
    gpo_uuid=$(echo "$gpo_uuid" | sed 's/[{}]//g')
    
    local domain_name=$(get_domain)
    local gpo_path="/var/lib/samba/sysvol/${domain_name}/Policies/{${gpo_uuid}}"
    
    echo "🗑️ REMOVENDO GPO"
    echo "════════════════════════════════════"
    echo "🆔 UUID: {$gpo_uuid}"
    echo "📁 Caminho: $gpo_path"
    echo ""
    
    if [ -d "$gpo_path" ]; then
        echo "📁 Removendo arquivos da GPO..."
        rm -rf "$gpo_path"
        echo "✅ Arquivos removidos com sucesso"
    else
        echo "⚠️ Diretório da GPO não encontrado"
    fi
    
    # Tentar remover do AD
    echo "📋 Removendo entrada do Active Directory..."
    if samba-tool gpo del "{$gpo_uuid}" 2>/dev/null; then
        echo "✅ GPO removida do Active Directory"
    else
        echo "⚠️ Falha ao remover do AD - pode precisar ser removida manualmente"
    fi
    
    echo "🔄 Recarregando configurações..."
    smbcontrol all reload-config 2>/dev/null
    
    echo "✅ Remoção concluída!"
}

# Função para validar dependências
check_dependencies() {
    echo "🔍 VERIFICANDO DEPENDÊNCIAS"
    echo "══════════════════════════════════"
    
    local missing_deps=()
    
    # Verificar samba-tool
    if ! command -v samba-tool >/dev/null 2>&1; then
        missing_deps+=("samba-tool")
    else
        echo "✅ samba-tool encontrado"
    fi
    
    # Verificar ldbmodify
    if ! command -v ldbmodify >/dev/null 2>&1; then
        missing_deps+=("ldbmodify")
    else
        echo "✅ ldbmodify encontrado"
    fi
    
    # Verificar uuidgen
    if ! command -v uuidgen >/dev/null 2>&1; then
        echo "⚠️ uuidgen não encontrado - usando /proc/sys/kernel/random/uuid"
    else
        echo "✅ uuidgen encontrado"
    fi
    
    # Verificar diretório sysvol
    local domain_name=$(get_domain)
    local sysvol_path="/var/lib/samba/sysvol/${domain_name}"
    
    if [ -d "$sysvol_path" ]; then
        echo "✅ Diretório sysvol encontrado: $sysvol_path"
    else
        echo "❌ Diretório sysvol não encontrado: $sysvol_path"
        missing_deps+=("sysvol")
    fi
    
    if [ ${#missing_deps[@]} -eq 0 ]; then
        echo ""
        echo "🎉 Todas as dependências estão satisfeitas!"
        return 0
    else
        echo ""
        echo "❌ DEPENDÊNCIAS FALTANDO:"
        for dep in "${missing_deps[@]}"; do
            echo "   • $dep"
        done
        return 1
    fi
}

# Função principal para criar compartilhamento com GPO
create_share_with_gpo() {
    local share_name="$1"
    local share_path="$2"
    local share_users="$3"
    local drive_letter="$4"
    local create_shortcut="$5"
    local writable="${6:-yes}"
    local browsable="${7:-yes}"
    
    echo "🚀 CRIANDO COMPARTILHAMENTO COM GPO"
    echo "═══════════════════════════════════════════"
    
    # 1. Criar compartilhamento normal primeiro
    echo "📂 Passo 1: Criando compartilhamento..."
    
    # Validações
    if [[ $share_name = *" "* ]] || [[ $share_path = *" "* ]] || [[ $share_name = "" ]]; then
        echo "❌ Erro: Não crie compartilhamentos com espaços nos nomes ou nomes vazios!"
        return 1
    fi
    
    if [ -f "/etc/samba/external/smb.conf.d/$share_name.conf" ]; then
        echo "❌ Erro: Um compartilhamento com este nome já existe na rede!"
        return 1
    fi
    
    # Criar estrutura se não existir
    mkdir -p /etc/samba/external/smb.conf.d/
    mkdir -p "/mnt$share_path"
    
    # Criar arquivo de configuração do compartilhamento
    cat > "/etc/samba/external/smb.conf.d/$share_name.conf" << EOF
[$share_name]
path = /mnt$share_path
valid users = $share_users
admin users = $share_users
writable = $writable
browsable = $browsable
guest ok = no
create mask = 0777
force create mode = 0777
directory mask = 0777
force directory mode = 0777
EOF
    
    # Aplicar permissões
    chmod 777 "/mnt$share_path"
    
    # Revalidar compartilhamentos
    find /etc/samba/external/smb.conf.d/ -type f -print | sed -e 's/^/include = /' > /etc/samba/external/includes.conf
    smbcontrol all reload-config 2>/dev/null
    
    echo "✅ Compartilhamento criado com sucesso!"
    echo ""
    
    # 2. Criar GPO
    echo "📋 Passo 2: Criando GPO..."
    create_gpo_for_share "$share_name" "$share_path" "$drive_letter" "$share_users" "$create_shortcut"
    
    echo ""
    echo "🎉 COMPARTILHAMENTO COM GPO CRIADO COM SUCESSO!"
    echo "════════════════════════════════════════════════════════════════"
    echo "📊 RESUMO COMPLETO:"
    echo "   📂 Compartilhamento: $share_name"
    echo "   📁 Caminho local: /mnt$share_path"
    echo "   🌐 Caminho de rede: \\\\$(hostname)\\$share_name"
    echo "   👥 Usuários: $share_users"
    echo "   💿 Unidade mapeada: $drive_letter:"
    echo "   🔗 Atalho desktop: $create_shortcut"
    echo "   ✏️ Gravável: $writable"
    echo "   👁️ Navegável: $browsable"
    echo "════════════════════════════════════════════════════════════════"
}

# Menu principal (integração com sistema existente)
main_menu_gpo() {
    echo ""
    echo "🎯 GPO GENERATOR PARA SAMBA AD-DC"
    echo "═══════════════════════════════════════════"
    echo "1. Verificar dependências"
    echo "2. Criar compartilhamento com GPO"
    echo "3. Criar GPO para compartilhamento existente"
    echo "4. Listar GPOs existentes"
    echo "5. Remover GPO"
    echo "6. Sair"
    echo "═══════════════════════════════════════════"
    echo -n "Escolha uma opção: "
    
    read -r option
    case $option in
        1)
            check_dependencies
            read -p "Pressione Enter para continuar..."
            main_menu_gpo
            ;;
        2)
            echo ""
            echo "📂 CRIAR COMPARTILHAMENTO COM GPO"
            echo "════════════════════════════════════"
            read -p "Nome do compartilhamento: " share_name
            read -p "Caminho (/mnt): " share_path
            read -p "Usuários/grupos (ex: @grupo, usuario): " share_users
            read -p "Letra da unidade (A-Z): " drive_letter
            read -p "Criar atalho no desktop? (yes/no): " create_shortcut
            read -p "Gravável? (yes/no) [yes]: " writable
            read -p "Navegável? (yes/no) [yes]: " browsable
            
            writable=${writable:-yes}
            browsable=${browsable:-yes}
            
            create_share_with_gpo "$share_name" "$share_path" "$share_users" "$drive_letter" "$create_shortcut" "$writable" "$browsable"
            read -p "Pressione Enter para continuar..."
            main_menu_gpo
            ;;
        3)
            echo ""
            echo "📋 CRIAR GPO PARA COMPARTILHAMENTO EXISTENTE"
            echo "═══════════════════════════════════════════════"
            read -p "Nome do compartilhamento: " share_name
            read -p "Caminho do compartilhamento: " share_path
            read -p "Letra da unidade (A-Z): " drive_letter
            read -p "Grupos alvo: " target_groups
            read -p "Criar atalho no desktop? (yes/no): " create_shortcut
            
            create_gpo_for_share "$share_name" "$share_path" "$drive_letter" "$target_groups" "$create_shortcut"
            read -p "Pressione Enter para continuar..."
            main_menu_gpo
            ;;
        4)
            list_gpos
            read -p "Pressione Enter para continuar..."
            main_menu_gpo
            ;;
        5)
            echo ""
            echo "🗑️ REMOVER GPO"
            echo "════════════════════════════════"
            read -p "UUID da GPO (com ou sem chaves): " gpo_uuid
            
            if [ -n "$gpo_uuid" ]; then
                echo ""
                echo "⚠️ ATENÇÃO: Esta ação é irreversível!"
                read -p "Tem certeza que deseja remover a GPO $gpo_uuid? (yes/no): " confirm
                
                if [ "$confirm" = "yes" ]; then
                    remove_gpo "$gpo_uuid"
                else
                    echo "❌ Operação cancelada"
                fi
            else
                echo "❌ UUID não fornecido"
            fi
            
            read -p "Pressione Enter para continuar..."
            main_menu_gpo
            ;;
        6)
            echo "👋 Saindo..."
            exit 0
            ;;
        *)
            echo "❌ Opção inválida!"
            main_menu_gpo
            ;;
    esac
}

# Verificar se é chamada direta ou integração
if [ "$1" = "--menu" ]; then
    main_menu_gpo
elif [ "$1" = "--create-gpo" ]; then
    shift
    create_gpo_for_share "$@"
elif [ "$1" = "--create-share-gpo" ]; then
    shift
    create_share_with_gpo "$@"
elif [ "$1" = "--list" ]; then
    list_gpos
elif [ "$1" = "--remove" ]; then
    remove_gpo "$2"
elif [ "$1" = "--check" ]; then
    check_dependencies
else
    echo "🎯 GPO Generator para Samba AD-DC"
    echo ""
    echo "Uso:"
    echo "  $0 --menu                                    # Menu interativo"
    echo "  $0 --create-gpo <nome> <caminho> <letra> <grupos> <atalho>"
    echo "  $0 --create-share-gpo <nome> <caminho> <usuarios> <letra> <atalho> [gravavel] [navegavel]"
    echo "  $0 --list                                    # Listar GPOs"
    echo "  $0 --remove <uuid>                          # Remover GPO"
    echo "  $0 --check                                   # Verificar dependências"
    echo ""
    echo "Exemplos:"
    echo "  $0 --create-gpo \"Vendas\" \"/vendas\" \"V\" \"@Vendas\" \"yes\""
    echo "  $0 --create-share-gpo \"Marketing\" \"/marketing\" \"@Marketing,joao\" \"M\" \"no\" \"yes\" \"yes\""
fi
