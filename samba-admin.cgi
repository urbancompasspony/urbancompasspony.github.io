#!/bin/bash

# Cabe√ßalho HTTP obrigat√≥rio
echo "Content-Type: application/json; charset=UTF-8"
echo ""

# Vari√°veis globais
ACTION=""
USERNAME=""
FIRSTNAME=""
PASSWORD=""
EMAIL=""
MUST_CHANGE_PASSWORD=""
GROUP=""
COMPUTER=""
SHARE_NAME=""
SHARE_PATH=""
OU_NAME=""
SILO_NAME=""
SEARCH_TERM=""
SOURCE_USERNAME=""
TARGET_USERNAME=""

# Fun√ß√£o para log de a√ß√µes
log_action() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> /var/log/samba-cgi/actions.log
}

# Fun√ß√£o para processar par√¢metros CGI
parse_cgi_params() {
    if [ "$REQUEST_METHOD" = "POST" ]; then
        read -n "$CONTENT_LENGTH" QUERY_STRING
    fi

    # Decodifica par√¢metros URL
    QUERY_STRING=$(echo "$QUERY_STRING" | sed 's/+/ /g')

    IFS='&'
    for param in $QUERY_STRING; do
        key=$(echo "$param" | cut -d'=' -f1)
        value=$(echo "$param" | cut -d'=' -f2- | python3 -c "import sys, urllib.parse; print(urllib.parse.unquote(sys.stdin.read().strip()))")

        case "$key" in
            "action") ACTION="$value" ;;
            "username") USERNAME="$value" ;;
            "source-group") SOURCE_GROUP="$value" ;;
            "target-group") TARGET_GROUP="$value" ;;
            "display-name") FIRSTNAME="$value" ;;
            "password") PASSWORD="$value" ;;
            "email") EMAIL="$value" ;;
            "must-change-password") MUST_CHANGE_PASSWORD="$value" ;;
            "group") GROUP="$value" ;;
            "computer") COMPUTER="$value" ;;
            "share-name") SHARE_NAME="$value" ;;
            "share-path") SHARE_PATH="$value" ;;
            "share-users") SHARE_USERS="$value" ;;
            "writable") WRITABLE="$value" ;;
            "browsable") BROWSABLE="$value" ;;
            "ou-name") OU_NAME="$value" ;;
            "silo-name") SILO_NAME="$value" ;;
            "search-term") SEARCH_TERM="$value" ;;
            "source-username") SOURCE_USERNAME="$value" ;;
            "target-username") TARGET_USERNAME="$value" ;;
            "expiry-date") EXPIRY_DATE="$value" ;;
            "days") DAYS="$value" ;;
            "history-length") HISTORY_LENGTH="$value" ;;
            "min-length") MIN_LENGTH="$value" ;;
            "min-age") MIN_AGE="$value" ;;
            "max-age") MAX_AGE="$value" ;;
            "max-attempts") MAX_ATTEMPTS="$value" ;;
        esac
    done
}

# Fun√ß√£o de valida√ß√£o e sanitiza√ß√£o
sanitize_input() {
    # Remove apenas caracteres perigosos para comandos shell
    # USU√ÅRIOS: Remove $ (n√£o devem ter $)
    USERNAME=$(echo "$USERNAME" | sed 's/[;&|`$(){}[\]*?<>]//g' | tr -d '\n\r')
    SOURCE_USERNAME=$(echo "$SOURCE_USERNAME" | sed 's/[;&|`$(){}[\]*?<>]//g' | tr -d '\n\r')
    TARGET_USERNAME=$(echo "$TARGET_USERNAME" | sed 's/[;&|`$(){}[\]*?<>]//g' | tr -d '\n\r')
    
    # GRUPOS: Remove $ (grupos padr√£o n√£o t√™m $)
    GROUP=$(echo "$GROUP" | sed 's/[;&|`$(){}[\]*?<>]//g' | tr -d '\n\r')
    SOURCE_GROUP=$(echo "$SOURCE_GROUP" | sed 's/[;&|`$(){}[\]*?<>]//g' | tr -d '\n\r')
    TARGET_GROUP=$(echo "$TARGET_GROUP" | sed 's/[;&|`$(){}[\]*?<>]//g' | tr -d '\n\r')
    
    # COMPUTADORES: Preserva $ porque o c√≥digo adiciona automaticamente
    COMPUTER=$(echo "$COMPUTER" | sed 's/[;&|`(){}[\]*?<>]//g' | tr -d '\n\r')
    
    # OUTROS: Remove caracteres perigosos mas preserva espa√ßos e acentos
    FIRSTNAME=$(echo "$FIRSTNAME" | sed 's/[;&|`(){}[\]*?<>]//g' | tr -d '\n\r')
    OU_NAME=$(echo "$OU_NAME" | sed 's/[;&|`(){}[\]*?<>]//g' | tr -d '\n\r')
    SILO_NAME=$(echo "$SILO_NAME" | sed 's/[;&|`(){}[\]*?<>]//g' | tr -d '\n\r')
    SEARCH_TERM=$(echo "$SEARCH_TERM" | sed 's/[;&|`(){}[\]*?<>]//g' | tr -d '\n\r')

    # Limitar tamanho para evitar buffer overflow
    USERNAME=$(echo "$USERNAME" | cut -c1-64)
    GROUP=$(echo "$GROUP" | cut -c1-64)
    SOURCE_GROUP=$(echo "$SOURCE_GROUP" | cut -c1-64)
    TARGET_GROUP=$(echo "$TARGET_GROUP" | cut -c1-64)
    COMPUTER=$(echo "$COMPUTER" | cut -c1-15)  # Computadores t√™m limite menor

    # Shares
    SHARE_NAME=$(echo "$SHARE_NAME" | sed 's/[^a-zA-Z0-9._-]//g')
    SHARE_PATH=$(echo "$SHARE_PATH" | sed 's|[^a-zA-Z0-9/_.-]||g')
    # Validar path seguro
    if ! [[ "$SHARE_PATH" =~ ^/?[a-zA-Z0-9/_.-]*$ ]]; then
      SHARE_PATH=""
    fi

    # Validar email
    if [ -n "$EMAIL" ] && ! [[ "$EMAIL" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
        EMAIL=""
    fi

    # Validar paths seguros
    if ! [[ "$SHARE_PATH" =~ ^/[a-zA-Z0-9/_.-]+$ ]]; then
        SHARE_PATH=""
    fi
}

# Fun√ß√£o para executar comandos sudo samba-tool com seguran√ßa
execute_samba_command() {
    log_action "Executando: $*"

    # Executa o comando diretamente sem timeout se n√£o estiver dispon√≠vel
    if command -v timeout >/dev/null 2>&1; then
        result=$(timeout 30 "$@" 2>&1)
    else
        result=$("$@" 2>&1)
    fi

    exit_code=$?

    if [ $exit_code -eq 0 ]; then
        echo "$result"
    else
        echo "Erro ao executar o comando: $result"
    fi
}

# Fun√ß√£o para retornar resposta JSON simples
json_response() {
    local status="$1"
    local message="$2"
    local output="$3"

    if [ -z "$output" ]; then
        echo "$status" "$message"
    else
        echo "$output"
    fi
}

# === FUN√á√ïES DE USU√ÅRIOS ===

create_user() {
    if [ -z "$USERNAME" ] || [ -z "$FIRSTNAME" ] || [ -z "$PASSWORD" ]; then
        echo "{\"status\":\"error\",\"message\":\"Campos obrigat√≥rios: username, display-name, password\"}"
        return
    fi

    # Executar comando de forma mais robusta
    log_action "Criando usu√°rio: $USERNAME"

    if command -v samba-tool >/dev/null 2>&1; then
        # Construir comando com argumentos separados
        if [ "$MUST_CHANGE_PASSWORD" = "on" ]; then
            result=$(sudo samba-tool user create "$USERNAME" "$PASSWORD" --surname="$FIRSTNAME" --must-change-at-next-login 2>&1)
        else
            result=$(sudo samba-tool user create "$USERNAME" "$PASSWORD" --surname="$FIRSTNAME" 2>&1)
        fi
        exit_code=$?
    else
        result="samba-tool n√£o encontrado no sistema"
        exit_code=1
    fi

    if [ $exit_code -eq 0 ]; then
        echo "{\"status\":\"success\",\"message\":\"Usu√°rio $USERNAME criado com sucesso\",\"output\":\"$result\"}"
    else
        echo "{\"status\":\"error\",\"message\":\"Erro ao criar usu√°rio: $result\"}"
    fi
}

list_users() {
    execute_samba_command sudo samba-tool user list
}

search_user() {
    if [ -z "$SEARCH_TERM" ]; then
        json_response "error" "Termo de busca √© obrigat√≥rio"
        return
    fi

    result=$(sudo samba-tool user list | grep "$SEARCH_TERM")
    json_response "" "Resultados encontrados" "$result"
}

check_user() {
    if [ -z "$USERNAME" ]; then
        echo "Erro: Nome do usu√°rio √© obrigat√≥rio"
        return
    fi

    # Obter informa√ß√µes b√°sicas do usu√°rio
    user_info=$(sudo samba-tool user show "$USERNAME" 2>&1)
    exit_code=$?
    
    if [ $exit_code -ne 0 ]; then
        echo "Erro: Usu√°rio n√£o encontrado: $user_info"
        return
    fi
    
    # Extrair dados para c√°lculos
    pwd_last_set=$(echo "$user_info" | grep -i "pwdLastSet" | cut -d: -f2- | tr -d ' ')
    user_account_control=$(echo "$user_info" | grep -i "userAccountControl" | cut -d: -f2- | tr -d ' ')
    account_expires=$(echo "$user_info" | grep -i "accountExpires" | cut -d: -f2- | tr -d ' ')

# Verificar se o usu√°rio est√° bloqueado (ap√≥s extrair user_account_control)
user_account_control=$(echo "$user_info" | grep -i "userAccountControl" | cut -d: -f2- | tr -d ' ')

# Verificar status de bloqueio (bit 2 = 2 significa conta desabilitada)
if [ -n "$user_account_control" ]; then
    disabled_flag=$((user_account_control & 2))
    if [ $disabled_flag -ne 0 ]; then
        user_blocked="true"
        block_status="BLOQUEADO"
        block_color_bg="#f8d7da"
        block_color_border="#dc3545"
        block_color_text="#721c24"
        block_icon="üö´"
    else
        user_blocked="false"
        block_status="ATIVO"
        block_color_bg="#d4edda"
        block_color_border="#28a745"
        block_color_text="#155724"
        block_icon="‚úÖ"
    fi
else
    user_blocked="unknown"
    block_status="INDETERMINADO"
    block_color_bg="#fff3cd"
    block_color_border="#ffc107"
    block_color_text="#856404"
    block_icon="‚ùì"
fi

    # Container principal com tipografia melhorada
    echo "<div style='background: white; padding: 16px; border-radius: 8px; font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif; line-height: 1.5; max-width: 100%;'>"
    
    # T√≠tulo principal sem os dois pontos
    echo "<h4 style='color: #e67e22; margin: 0 0 20px 0; font-size: 18px; font-weight: 600;'>üìã Informa√ß√µes do Usu√°rio $USERNAME</h4>"
    
    # Blocos de status diretos
    echo "<div style='margin-bottom: 16px;'>"

# Exibir status de bloqueio da conta
echo "<div style='padding: 8px 12px; background: $block_color_bg; border-left: 3px solid $block_color_border; margin-bottom: 8px; border-radius: 3px;'>"
echo "<span style='font-size: 16px; font-weight: 600; color: $block_color_text;'>üîí STATUS:</span> <span style='color: $block_color_text; font-size: 16px;'>$block_icon $block_status</span></div>"
    
    # Verificar expira√ß√£o da SENHA - bloco menor, fonte maior
    if [ -n "$user_account_control" ]; then
        dont_expire_flag=$((user_account_control & 65536))
        if [ $dont_expire_flag -ne 0 ]; then
            echo "<div style='padding: 8px 12px; background: #d1ecf1; border-left: 3px solid #17a2b8; margin-bottom: 8px; border-radius: 3px;'>"
            echo "<span style='font-size: 16px; font-weight: 600; color: #0c5460;'>üîê SENHA:</span> <span style='color: #0c5460; font-size: 16px;'>Configurada para NUNCA EXPIRAR</span></div>"
        else
            # Obter pol√≠tica de senha do dom√≠nio
            password_policy=$(sudo samba-tool domain passwordsettings show 2>/dev/null)
            max_pwd_age=$(echo "$password_policy" | grep -i "Maximum password age" | grep -o '[0-9]*' | head -1)
            
            if [ -n "$max_pwd_age" ] && [ "$max_pwd_age" != "0" ] && [ -n "$pwd_last_set" ] && [ "$pwd_last_set" != "0" ]; then
                # Calcular dias restantes para senha expirar
                epoch_diff=11644473600
                pwd_set_unix=$((pwd_last_set / 10000000 - epoch_diff))
                current_time=$(date +%s)
                days_since_change=$(((current_time - pwd_set_unix) / 86400))
                days_remaining=$((max_pwd_age - days_since_change))
                
                if [ $days_remaining -gt 7 ]; then
                    color_bg="#d4edda"
                    color_border="#28a745"
                    color_text="#155724"
                    icon="‚úÖ"
                elif [ $days_remaining -gt 0 ]; then
                    color_bg="#fff3cd"
                    color_border="#ffc107"
                    color_text="#856404"
                    icon="‚ö†Ô∏è"
                else
                    color_bg="#f8d7da"
                    color_border="#dc3545"
                    color_text="#721c24"
                    icon="‚ùå"
                fi
                
                echo "<div style='padding: 8px 12px; background: $color_bg; border-left: 3px solid $color_border; margin-bottom: 8px; border-radius: 3px;'>"
                
                if [ $days_remaining -gt 0 ]; then
                    expiry_date=$(date -d "+${days_remaining} days" '+%d/%m/%Y')
                    echo "<span style='font-size: 16px; font-weight: 600; color: $color_text;'>üîê SENHA:</span> <span style='color: $color_text; font-size: 16px;'>$icon Expira em $days_remaining dias ($expiry_date)</span></div>"
                elif [ $days_remaining -eq 0 ]; then
                    echo "<span style='font-size: 16px; font-weight: 600; color: $color_text;'>üîê SENHA:</span> <span style='color: $color_text; font-size: 16px;'>$icon EXPIRA HOJE!</span></div>"
                else
                    echo "<span style='font-size: 16px; font-weight: 600; color: $color_text;'>üîê SENHA:</span> <span style='color: $color_text; font-size: 16px;'>$icon EXPIRADA h√° $((days_remaining * -1)) dias</span></div>"
                fi
            else
                echo "<div style='padding: 8px 12px; background: #d1ecf1; border-left: 3px solid #17a2b8; margin-bottom: 8px; border-radius: 3px;'>"
                echo "<span style='font-size: 16px; font-weight: 600; color: #0c5460;'>üîê SENHA:</span> <span style='color: #0c5460; font-size: 16px;'>Pol√≠tica do dom√≠nio = nunca expira</span></div>"
            fi
        fi
    fi
    
    # Verificar expira√ß√£o da CONTA - bloco menor, fonte maior
    if [ -n "$account_expires" ] && [ "$account_expires" != "0" ] && [ "$account_expires" != "9223372036854775807" ]; then
        epoch_diff=11644473600
        account_exp_unix=$((account_expires / 10000000 - epoch_diff))
        current_time=$(date +%s)
        time_diff=$((account_exp_unix - current_time))
        account_days_remaining=$((time_diff / 86400))
        
        if [ $account_days_remaining -gt 0 ] && [ $account_days_remaining -lt 36500 ]; then
            if [ $account_days_remaining -gt 30 ]; then
                color_bg="#d4edda"
                color_border="#28a745"
                color_text="#155724"
                icon="‚úÖ"
            elif [ $account_days_remaining -gt 7 ]; then
                color_bg="#fff3cd"
                color_border="#ffc107"
                color_text="#856404"
                icon="‚ö†Ô∏è"
            else
                color_bg="#f8d7da"
                color_border="#dc3545"
                color_text="#721c24"
                icon="üö®"
            fi
            
            expiry_date_only=$(date -d "@$account_exp_unix" '+%d/%m/%Y')
            echo "<div style='padding: 8px 12px; background: $color_bg; border-left: 3px solid $color_border; margin-bottom: 8px; border-radius: 3px;'>"
            echo "<span style='font-size: 16px; font-weight: 600; color: $color_text;'>üë§ CONTA:</span> <span style='color: $color_text; font-size: 16px;'>$icon Expira em $account_days_remaining dias ($expiry_date_only)</span></div>"
        elif [ $account_days_remaining -le 0 ]; then
            echo "<div style='padding: 8px 12px; background: #f8d7da; border-left: 3px solid #dc3545; margin-bottom: 8px; border-radius: 3px;'>"
            echo "<span style='font-size: 16px; font-weight: 600; color: #721c24;'>üë§ CONTA:</span> <span style='color: #721c24; font-size: 16px;'>‚ùå EXPIRADA</span></div>"
        fi
    else
        echo "<div style='padding: 8px 12px; background: #d4edda; border-left: 3px solid #28a745; margin-bottom: 8px; border-radius: 3px;'>"
        echo "<span style='font-size: 16px; font-weight: 600; color: #155724;'>üë§ CONTA:</span> <span style='color: #155724; font-size: 16px;'>‚àû Nunca expira</span></div>"
    fi
    
    echo "</div>"
    
    # Se√ß√£o t√©cnica com fonte maior
    echo "<details style='background: #f8f9fa; padding: 14px; border-radius: 6px; border: 1px solid #e9ecef;'>"
    echo "<summary style='cursor: pointer; font-weight: 600; color: #495057; font-size: 16px; margin-bottom: 0; outline: none;'>üîß Informa√ß√µes T√©cnicas Detalhadas</summary>"
    echo "<pre style='background: #343a40; color: #f8f9fa; padding: 14px; border-radius: 4px; overflow-x: auto; margin: 10px 0 0 0; font-size: 13px; line-height: 1.4; border: none;'>$user_info</pre>"
    echo "</details>"
    
    echo "</div>"
}

show_group_hierarchy() {
    if [ -z "$GROUP" ]; then
        echo "Erro: Nome do grupo √© obrigat√≥rio"
        return
    fi

    echo "üèóÔ∏è HIERARQUIA DO GRUPO: $GROUP"
    echo ""
    
    # Mostrar grupos pai (onde este grupo √© membro)
    echo "üìà GRUPOS PAIS (este grupo √© membro de):"
    parent_groups=$(sudo samba-tool group list 2>/dev/null | while read parent; do
        if [ -n "$parent" ]; then
            members=$(sudo samba-tool group listmembers "$parent" 2>/dev/null)
            if echo "$members" | grep -q "^$GROUP$"; then
                echo "   ‚îî‚îÄ‚îÄ $parent"
            fi
        fi
    done)
    
    if [ -n "$parent_groups" ]; then
        echo "$parent_groups"
    else
        echo "   (nenhum - grupo raiz)"
    fi
    
    echo ""
    
    # Mostrar membros diretos
    echo "üë• MEMBROS DIRETOS:"
    members=$(sudo samba-tool group listmembers "$GROUP" 2>/dev/null)
    if [ -n "$members" ]; then
        echo "$members" | sed 's/^/   ‚îú‚îÄ‚îÄ /'
    else
        echo "   (nenhum membro)"
    fi
    
    echo ""
    
    # Mostrar grupos filhos
    echo "üìâ GRUPOS FILHOS (grupos que s√£o membros deste):"
    child_groups=$(echo "$members" | while read member; do
        if [ -n "$member" ]; then
            # Verificar se o membro √© um grupo
            if sudo samba-tool group list 2>/dev/null | grep -q "^$member$"; then
                echo "   ‚îî‚îÄ‚îÄ $member (grupo)"
            fi
        fi
    done)
    
    if [ -n "$child_groups" ]; then
        echo "$child_groups"
    else
        echo "   (nenhum grupo filho)"
    fi
}

delete_user() {
    if [ -z "$USERNAME" ]; then
        json_response "error" "Nome do usu√°rio √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool user delete "$USERNAME"
}

enable_user() {
    if [ -z "$USERNAME" ]; then
        json_response "error" "Nome do usu√°rio √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool user enable "$USERNAME"
    json_response "Status:" "Usuario Habilitado!"
}

disable_user() {
    if [ -z "$USERNAME" ]; then
        json_response "error" "Nome do usu√°rio √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool user disable "$USERNAME"
    json_response "Status:" "Usuario Desabilitado!"
}

reset_password() {
    if [ -z "$USERNAME" ] || [ -z "$PASSWORD" ]; then
        json_response "error" "Username e nova senha s√£o obrigat√≥rios"
        return
    fi

    execute_samba_command sudo samba-tool user setpassword "$USERNAME" --newpassword="$PASSWORD"
}

promote_user() {
    if [ -z "$USERNAME" ]; then
        json_response "error" "Nome do usu√°rio √© obrigat√≥rio"
        return
    fi

    sudo samba-tool group addmembers "Domain Admins" "$USERNAME"
    sudo samba-tool group addmembers "Schema Admins" "$USERNAME"
    sudo samba-tool group addmembers "Enterprise Admins" "$USERNAME"
    sudo samba-tool group addmembers "Group Policy Creator Owners" "$USERNAME"
    sudo samba-tool group addmembers "Administrators" "$USERNAME"

    json_response "success" "Usu√°rio $USERNAME promovido a administrador"
}

demote_user() {
    if [ -z "$USERNAME" ]; then
        json_response "error" "Nome do usu√°rio √© obrigat√≥rio"
        return
    fi

    sudo samba-tool group removemembers "Domain Admins" "$USERNAME"
    sudo samba-tool group removemembers "Schema Admins" "$USERNAME"
    sudo samba-tool group removemembers "Enterprise Admins" "$USERNAME"
    sudo samba-tool group removemembers "Group Policy Creator Owners" "$USERNAME"
    sudo samba-tool group removemembers "Administrators" "$USERNAME"

    json_response "success" "Usu√°rio $USERNAME deixou de ser administrador"
}

show_user_groups() {
    if [ -z "$USERNAME" ]; then
        json_response "error" "Nome do usu√°rio √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool user getgroups "$USERNAME"
}

move_user_ou() {
    if [ -z "$USERNAME" ] || [ -z "$OU_NAME" ]; then
        json_response "error" "Username e nome da OU s√£o obrigat√≥rios"
        return
    fi

    execute_samba_command sudo samba-tool user move "$USERNAME" OU="$OU_NAME"
}

# FUN√á√ÉO verify_password COMPLETAMENTE CORRIGIDA
verify_password() {
    if [ -z "$USERNAME" ] || [ -z "$PASSWORD" ]; then
        echo "Erro: Nome de usu√°rio e senha s√£o obrigat√≥rios"
        return
    fi

    log_action "Verificando senha para usu√°rio: $USERNAME"

    # Valida√ß√£o do usu√°rio
    user_check=$(sudo samba-tool user list 2>/dev/null | grep -x "$USERNAME")
    if [ "$user_check" != "$USERNAME" ]; then
        echo "Erro: Usu√°rio '$USERNAME' n√£o encontrado no dom√≠nio"
        return
    fi

    # Obter dom√≠nio SILENCIOSAMENTE
    DOMAIN=$(sudo samba-tool domain info 127.0.0.1 2>/dev/null | grep -i "domain.*:" | head -1 | cut -d: -f2 | tr -d ' ' | tr '[:lower:]' '[:upper:]')
    if [ -z "$DOMAIN" ]; then
        DOMAIN="WORKGROUP"
    fi

    # Tentar kinit COMPLETAMENTE SILENCIOSO
    export KRB5_TRACE=/dev/null
    kinit_output=$(echo "$PASSWORD" | kinit "$USERNAME@$DOMAIN" 2>&1)
    kinit_result=$?
    
    # Limpar ticket imediatamente
    kdestroy 2>/dev/null

    if [ $kinit_result -eq 0 ]; then
        echo "‚úÖ SENHA V√ÅLIDA para usu√°rio '$USERNAME'"
        echo ""

        # === AN√ÅLISE DETALHADA DE EXPIRA√á√ÉO ===
        
        # Buscar informa√ß√µes do usu√°rio
        user_info=$(sudo samba-tool user show "$USERNAME" 2>/dev/null)
        
        # Extrair dados importantes
        pwd_last_set=$(echo "$user_info" | grep -i "pwdLastSet" | cut -d: -f2- | tr -d ' ')
        user_account_control=$(echo "$user_info" | grep -i "userAccountControl" | cut -d: -f2- | tr -d ' ')
        account_expires=$(echo "$user_info" | grep -i "accountExpires" | cut -d: -f2- | tr -d ' ')

        # DEBUG: Mostrar valores extra√≠dos (remover depois)
        # echo "DEBUG - pwdLastSet: $pwd_last_set"
        # echo "DEBUG - userAccountControl: $user_account_control"
        # echo "DEBUG - accountExpires: $account_expires"

        # Verificar flag DONT_EXPIRE_PASSWORD (bit 16 = 65536)
        if [ -n "$user_account_control" ]; then
            dont_expire_flag=$((user_account_control & 65536))
            
            if [ $dont_expire_flag -ne 0 ]; then
                # Flag --noexpiry est√° ATIVA
                echo "üîê SENHA: Configurada para NUNCA EXPIRAR (flag --noexpiry ativa)"
            else
                # Flag --noexpiry N√ÉO est√° ativa, verificar pol√≠tica do dom√≠nio
                echo "üîç Analisando pol√≠tica de expira√ß√£o..."
                
                # Obter pol√≠tica de senha do dom√≠nio
                password_policy=$(sudo samba-tool domain passwordsettings show 2>/dev/null)
                max_pwd_age=$(echo "$password_policy" | grep -i "Maximum password age" | cut -d: -f2 | tr -d ' ')
                
                echo "üìã Pol√≠tica do dom√≠nio - Idade m√°xima: $max_pwd_age dias"
                
                # Se max_pwd_age √© 0 = senhas nunca expiram por pol√≠tica
                if [ "$max_pwd_age" = "0" ]; then
                    echo "üîê SENHA: Nunca expira (pol√≠tica do dom√≠nio = 0 dias)"
                elif [ -z "$max_pwd_age" ]; then
                    echo "üîê SENHA: N√£o foi poss√≠vel determinar pol√≠tica de expira√ß√£o"
                elif [ -n "$pwd_last_set" ] && [ "$pwd_last_set" != "0" ]; then
                    # Calcular expira√ß√£o real
                    echo "üî¢ Calculando dias restantes..."
                    
                    # Converter Windows timestamp para Unix
                    epoch_diff=11644473600
                    pwd_set_unix=$((pwd_last_set / 10000000 - epoch_diff))
                    current_time=$(date +%s)
                    days_since_change=$(((current_time - pwd_set_unix) / 86400))
                    days_remaining=$((max_pwd_age - days_since_change))

                    # Mostrar quando a senha foi alterada
                    pwd_change_date=$(date -d "@$pwd_set_unix" '+%d/%m/%Y √†s %H:%M')
                    echo "üìÖ Senha alterada em: $pwd_change_date"
                    echo "‚è±Ô∏è Dias desde a altera√ß√£o: $days_since_change"

                    if [ $days_remaining -gt 0 ]; then
                        expiry_date=$(date -d "+${days_remaining} days" '+%d/%m/%Y')
                        echo "üîê SENHA: Expira em $days_remaining dias ($expiry_date)"
                    elif [ $days_remaining -eq 0 ]; then
                        echo "‚ö†Ô∏è SENHA: EXPIRA HOJE!"
                    else
                        days_overdue=$((days_remaining * -1))
                        echo "‚ùå SENHA: EXPIRADA h√° $days_overdue dias"
                    fi
                else
                    echo "üîê SENHA: N√£o foi poss√≠vel calcular expira√ß√£o (dados incompletos)"
                fi
            fi
        else
            echo "‚ùå Erro: N√£o foi poss√≠vel obter userAccountControl"
        fi

        # === VERIFICAR EXPIRA√á√ÉO DA CONTA (separado da senha) ===
        if [ -n "$account_expires" ] && [ "$account_expires" != "0" ] && [ "$account_expires" != "9223372036854775807" ]; then
            echo ""
            echo "üë§ AN√ÅLISE DA CONTA:"
            epoch_diff=11644473600
            account_exp_unix=$((account_expires / 10000000 - epoch_diff))
            current_time=$(date +%s)
            account_days_remaining=$(((account_exp_unix - current_time) / 86400))
            
            if [ $account_days_remaining -gt 0 ]; then
                account_expiry_date=$(date -d "@$account_exp_unix" '+%d/%m/%Y')
                echo "üë§ CONTA: Expira em $account_days_remaining dias ($account_expiry_date)"
            else
                echo "üë§ CONTA: EXPIRADA"
            fi
        else
            echo ""
            echo "üë§ CONTA: Nunca expira"
        fi

    else
        echo "‚ùå SENHA INV√ÅLIDA para usu√°rio '$USERNAME'"
        echo ""
        echo "üîç Detalhes do erro: $kinit_output"
        
        # Verificar se conta est√° ativa
        user_status=$(sudo samba-tool user show "$USERNAME" 2>/dev/null | grep -i "userAccountControl" | cut -d: -f2- | tr -d ' ')
        if [ "$user_status" = "514" ] || [ "$user_status" = "546" ]; then
            echo "‚ö†Ô∏è Conta '$USERNAME' est√° DESABILITADA"
        fi
    fi
}

set_account_expiry() {
    if [ -z "$USERNAME" ]; then
        echo "Erro: Nome do usu√°rio √© obrigat√≥rio"
        return
    fi

    if [ -z "$EXPIRY_DATE" ]; then
        echo "Erro: Data de expira√ß√£o √© obrigat√≥ria"
        return
    fi

    # Valida√ß√£o
    user_check=$(sudo samba-tool user list 2>/dev/null | grep -x "$USERNAME")
    if [ "$user_check" != "$USERNAME" ]; then
        echo "Erro: Usu√°rio '$USERNAME' n√£o encontrado no dom√≠nio"
        return
    fi

    if [ "$EXPIRY_DATE" != "never" ]; then
        echo "üîç Verificando pol√≠tica do dom√≠nio para expira√ß√£o de conta..."
        max_pwd_age=$(sudo samba-tool domain passwordsettings show 2>/dev/null | grep -i "Maximum password age" | grep -o '[0-9]*' | head -1)
        
        if [ "$max_pwd_age" = "0" ]; then
            echo "‚ö†Ô∏è AVISO: Pol√≠tica do dom√≠nio tem max-pwd-age=0"
            echo "   Isso pode interferir em algumas configura√ß√µes de expira√ß√£o"
            echo ""
            echo "üí≠ Recomenda√ß√£o: Ative pol√≠tica de expira√ß√£o primeiro"
            echo ""
            # Continue anyway para expira√ß√£o de CONTA (diferente de senha)
        fi
    fi

    # Verificar se √© para nunca expirar
    if [ "$EXPIRY_DATE" = "never" ]; then
        result=$(sudo samba-tool user setexpiry "$USERNAME" --noexpiry 2>&1)
        exit_code=$?

        if [ $exit_code -eq 0 ]; then
            echo "‚úÖ CONTA de $USERNAME configurada para NUNCA EXPIRAR"
            echo ""
            echo "üë§ Status: Conta ativa indefinidamente"
        else
            echo "‚ùå Erro: $result"
        fi
        return
    fi

    # Calcular dias da data atual at√© a data desejada
    current_date=$(date +%s)
    target_date=$(date -d "$EXPIRY_DATE" +%s 2>/dev/null)

    if [ $? -ne 0 ]; then
        echo "‚ùå Erro: Data inv√°lida '$EXPIRY_DATE'. Use formato YYYY-MM-DD"
        return
    fi

    days_diff=$(( (target_date - current_date) / 86400 ))

    if [ $days_diff -lt 0 ]; then
        echo "‚ùå Erro: A data $EXPIRY_DATE j√° passou! Use uma data futura."
        return
    fi

    # Executar comando
    result=$(sudo samba-tool user setexpiry "$USERNAME" --days="$days_diff" 2>&1)
    exit_code=$?

    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ CONTA de $USERNAME configurada para expirar em $days_diff dias"
        echo ""
        echo "üìÖ Data de expira√ß√£o: $EXPIRY_DATE"
        echo "üë§ Status: Conta expira automaticamente"
    else
        echo "‚ùå Erro: $result"
    fi
}

# === FUN√á√ïES DE GRUPOS ===

create_group() {
    if [ -z "$GROUP" ]; then
        json_response "error" "Nome do grupo √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool group add "$GROUP"
}

list_groups() {
    # Lista de grupos padr√£o para filtrar (uma por linha para grep)
    temp_filter="/tmp/samba_default_groups.txt"
    
    cat > "$temp_filter" << 'EOF'
^Administrators$
^Enterprise Admins$
^Schema Admins$
^Domain Admins$
^Domain Users$
^Domain Guests$
^Domain Controllers$
^Domain Computers$
^Enterprise Read-only Domain Controllers$
^Read-only Domain Controllers$
^Group Policy Creator Owners$
^RAS and IAS Servers$
^Terminal Server License Servers$
^Windows Authorization Access Group$
^Network Configuration Operators$
^Performance Monitor Users$
^Performance Log Users$
^Distributed COM Users$
^IIS_IUSRS$
^Cryptographic Operators$
^Event Log Readers$
^Certificate Service DCOM Access$
^Incoming Forest Trust Builders$
^Account Operators$
^Server Operators$
^Print Operators$
^Backup Operators$
^Replicator$
^Remote Desktop Users$
^Guests$
^Users$
^Pre-Windows 2000 Compatible Access$
^Allowed RODC Password Replication Group$
^Denied RODC Password Replication Group$
^Cert Publishers$
^DnsAdmins$
^DnsUpdateProxy$
^Protected Users$
EOF

    # Obter todos os grupos e filtrar
    all_groups=$(sudo samba-tool group list 2>/dev/null)
    
    if [ $? -ne 0 ]; then
        echo "Erro ao obter lista de grupos"
        rm -f "$temp_filter"
        return
    fi
    
    # Filtrar grupos customizados
    custom_groups=$(echo "$all_groups" | grep -v -f "$temp_filter")
    
    echo "=== GRUPOS CUSTOMIZADOS ==="
    echo ""
    
    if [ -n "$custom_groups" ]; then
        echo "$custom_groups" | sed 's/^/‚Ä¢ /'
        echo ""
        
        # Estat√≠sticas
        total_count=$(echo "$all_groups" | grep -v '^$' | wc -l)
        custom_count=$(echo "$custom_groups" | grep -v '^$' | wc -l)
        
        echo "üìä ESTAT√çSTICAS:"
        echo "   üë• Grupos customizados: $custom_count"
        echo "   üè¢ Grupos padr√£o (ocultos): $((total_count - custom_count))"
        echo "   üìã Total de grupos: $total_count"
    else
        echo "‚ö†Ô∏è Nenhum grupo customizado encontrado"
        echo ""
        total_count=$(echo "$all_groups" | grep -v '^$' | wc -l)
        echo "üìä Total de grupos padr√£o: $total_count"
    fi
    
    # Limpar arquivo tempor√°rio
    rm -f "$temp_filter"
}

list_all_groups() {
    execute_samba_command sudo samba-tool group list
}

search_group() {
    if [ -z "$SEARCH_TERM" ]; then
        json_response "error" "Termo de busca √© obrigat√≥rio"
        return
    fi

    result=$(sudo samba-tool group list | grep "$SEARCH_TERM")
    json_response "success" "Resultados encontrados" "$result"
}

check_group() {
    if [ -z "$GROUP" ]; then
        json_response "error" "Nome do grupo √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool group show "$GROUP"
}

delete_group() {
    if [ -z "$GROUP" ]; then
        json_response "error" "Nome do grupo √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool group delete "$GROUP"
}

add_user_to_group() {
    if [ -z "$USERNAME" ] || [ -z "$GROUP" ]; then
        json_response "error" "Username e nome do grupo s√£o obrigat√≥rios"
        return
    fi

    execute_samba_command sudo samba-tool group addmembers "$GROUP" "$USERNAME"
}

remove_user_from_group() {
    if [ -z "$USERNAME" ] || [ -z "$GROUP" ]; then
        json_response "error" "Username e nome do grupo s√£o obrigat√≥rios"
        return
    fi

    execute_samba_command sudo samba-tool group removemembers "$GROUP" "$USERNAME"
}

list_group_members() {
    if [ -z "$GROUP" ]; then
        json_response "error" "Nome do grupo √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool group listmembers "$GROUP"
}

move_group_ou() {
    if [ -z "$GROUP" ] || [ -z "$OU_NAME" ]; then
        json_response "error" "Nome do grupo e OU s√£o obrigat√≥rios"
        return
    fi

    execute_samba_command sudo samba-tool group move "$GROUP" OU="$OU_NAME"
}

copy_user_groups() {
    if [ -z "$SOURCE_USERNAME" ] || [ -z "$TARGET_USERNAME" ]; then
        echo "{\"status\":\"error\",\"message\":\"Usu√°rio de origem e destino s√£o obrigat√≥rios\"}"
        return
    fi

    log_action "Copiando grupos de $SOURCE_USERNAME para $TARGET_USERNAME"

    # Obter grupos do usu√°rio de origem
    groups_result=$(sudo samba-tool user getgroups "$SOURCE_USERNAME" 2>&1)
    exit_code=$?

    if [ $exit_code -ne 0 ]; then
        echo "{\"status\":\"error\",\"message\":\"Erro ao obter grupos do usu√°rio $SOURCE_USERNAME: $groups_result\"}"
        return
    fi

    # Adicionar cada grupo ao usu√°rio de destino
    success_count=0
    error_count=0
    errors=""

    echo "$groups_result" | while IFS= read -r group; do
        if [ -n "$group" ] && [ "$group" != "Domain Users" ]; then
            add_result=$(sudo samba-tool group addmembers "$group" "$TARGET_USERNAME" 2>&1)
            if [ $? -eq 0 ]; then
                success_count=$((success_count + 1))
            else
                error_count=$((error_count + 1))
                errors="$errors\n$group: $add_result"
            fi
        fi
    done

    if [ $error_count -eq 0 ]; then
        echo "{\"status\":\"success\",\"message\":\"Grupos copiados de $SOURCE_USERNAME para $TARGET_USERNAME\",\"output\":\"$groups_result\"}"
    else
        echo "{\"status\":\"warning\",\"message\":\"Grupos copiados com erros. Sucessos: $success_count, Erros: $error_count\",\"output\":\"$errors\"}"
    fi
}

# === FUN√á√ÉO PARA ADICIONAR GRUPO A GRUPO ===
add_group_to_group() {
    if [ -z "$SOURCE_GROUP" ] || [ -z "$TARGET_GROUP" ]; then
        echo "‚ùå Erro: Grupo de origem e destino s√£o obrigat√≥rios"
        return
    fi

    log_action "Adicionando grupo $SOURCE_GROUP ao grupo $TARGET_GROUP"

    # Valida√ß√µes
    source_check=$(sudo samba-tool group list 2>/dev/null | grep -x "$SOURCE_GROUP")
    if [ "$source_check" != "$SOURCE_GROUP" ]; then
        echo "‚ùå Erro: Grupo de origem '$SOURCE_GROUP' n√£o encontrado"
        return
    fi

    target_check=$(sudo samba-tool group list 2>/dev/null | grep -x "$TARGET_GROUP")
    if [ "$target_check" != "$TARGET_GROUP" ]; then
        echo "‚ùå Erro: Grupo de destino '$TARGET_GROUP' n√£o encontrado"
        return
    fi

    if [ "$SOURCE_GROUP" = "$TARGET_GROUP" ]; then
        echo "‚ùå Erro: Grupo de origem e destino n√£o podem ser iguais"
        return
    fi

    echo "üîç Verificando se '$SOURCE_GROUP' j√° √© membro de '$TARGET_GROUP'..."
    
    # Verificar se j√° √© membro
    existing_members=$(sudo samba-tool group listmembers "$TARGET_GROUP" 2>/dev/null)
    if echo "$existing_members" | grep -q "^$SOURCE_GROUP$"; then
        echo "‚ö†Ô∏è Grupo '$SOURCE_GROUP' j√° √© membro de '$TARGET_GROUP'"
        return
    fi

    echo "‚ûï Adicionando grupo '$SOURCE_GROUP' ao grupo '$TARGET_GROUP'..."
    
    # Executar comando
    result=$(sudo samba-tool group addmembers "$TARGET_GROUP" "$SOURCE_GROUP" 2>&1)
    exit_code=$?

    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ SUCESSO! Grupo '$SOURCE_GROUP' adicionado ao grupo '$TARGET_GROUP'"
        echo ""
        echo "üèóÔ∏è HIERARQUIA CRIADA:"
        echo "   üìÇ $TARGET_GROUP (grupo pai)"
        echo "   ‚îî‚îÄ‚îÄ üë• $SOURCE_GROUP (grupo filho)"
        echo ""
        echo "üí° RESULTADO:"
        echo "   ‚Ä¢ Membros de '$SOURCE_GROUP' herdam permiss√µes de '$TARGET_GROUP'"
        echo "   ‚Ä¢ Para ver membros: Menu ‚Üí Grupos ‚Üí Exibir membros de '$TARGET_GROUP'"
    else
        echo "‚ùå Erro ao adicionar grupo: $result"
    fi
}

# === FUN√á√ÉO PARA REMOVER GRUPO DE GRUPO ===
remove_group_from_group() {
    if [ -z "$SOURCE_GROUP" ] || [ -z "$TARGET_GROUP" ]; then
        echo "‚ùå Erro: Grupo de origem e destino s√£o obrigat√≥rios"
        return
    fi

    log_action "Removendo grupo $SOURCE_GROUP do grupo $TARGET_GROUP"

    # Valida√ß√µes
    source_check=$(sudo samba-tool group list 2>/dev/null | grep -x "$SOURCE_GROUP")
    if [ "$source_check" != "$SOURCE_GROUP" ]; then
        echo "‚ùå Erro: Grupo '$SOURCE_GROUP' n√£o encontrado"
        return
    fi

    target_check=$(sudo samba-tool group list 2>/dev/null | grep -x "$TARGET_GROUP")
    if [ "$target_check" != "$TARGET_GROUP" ]; then
        echo "‚ùå Erro: Grupo '$TARGET_GROUP' n√£o encontrado"
        return
    fi

    echo "üîç Verificando se '$SOURCE_GROUP' √© membro de '$TARGET_GROUP'..."
    
    # Verificar se √© membro
    existing_members=$(sudo samba-tool group listmembers "$TARGET_GROUP" 2>/dev/null)
    if ! echo "$existing_members" | grep -q "^$SOURCE_GROUP$"; then
        echo "‚ö†Ô∏è Grupo '$SOURCE_GROUP' N√ÉO √© membro de '$TARGET_GROUP'"
        echo ""
        echo "üìã Membros atuais de '$TARGET_GROUP':"
        if [ -n "$existing_members" ]; then
            echo "$existing_members" | sed 's/^/   ‚Ä¢ /'
        else
            echo "   (nenhum membro)"
        fi
        return
    fi

    echo "‚ûñ Removendo grupo '$SOURCE_GROUP' do grupo '$TARGET_GROUP'..."
    
    # Executar comando
    result=$(sudo samba-tool group removemembers "$TARGET_GROUP" "$SOURCE_GROUP" 2>&1)
    exit_code=$?

    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ SUCESSO! Grupo '$SOURCE_GROUP' removido do grupo '$TARGET_GROUP'"
        echo ""
        echo "üîì HIERARQUIA DESFEITA:"
        echo "   üìÇ $TARGET_GROUP (n√£o √© mais pai)"
        echo "   üî∏ $SOURCE_GROUP (agora independente)"
        echo ""
        echo "üí° RESULTADO:"
        echo "   ‚Ä¢ Membros de '$SOURCE_GROUP' n√£o herdam mais permiss√µes de '$TARGET_GROUP'"
        echo "   ‚Ä¢ Ambos os grupos continuam existindo independentemente"
    else
        echo "‚ùå Erro ao remover grupo: $result"
    fi
}

# === FUN√á√ïES DE COMPUTADORES ===

add_computer() {
    if [ -z "$COMPUTER" ]; then
        json_response "error" "Nome do computador √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool computer create "$COMPUTER"
}

list_computers() {
    execute_samba_command sudo samba-tool computer list
}

search_computer() {
    if [ -z "$SEARCH_TERM" ]; then
        json_response "error" "Termo de busca √© obrigat√≥rio"
        return
    fi

    result=$(sudo samba-tool computer list | grep "$SEARCH_TERM")
    json_response "success" "Resultados encontrados" "$result"
}

check_computer() {
    if [ -z "$COMPUTER" ]; then
        json_response "error" "Nome do computador √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool computer show "$COMPUTER\$"
}

delete_computer() {
    if [ -z "$COMPUTER" ]; then
        json_response "error" "Nome do computador √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool computer delete "$COMPUTER\$"
}

move_computer_ou() {
    if [ -z "$COMPUTER" ] || [ -z "$OU_NAME" ]; then
        json_response "error" "Nome do computador e OU s√£o obrigat√≥rios"
        return
    fi

    execute_samba_command sudo samba-tool computer move "$COMPUTER" OU="$OU_NAME"
}

# === FUN√á√ïES DE UNIDADES ORGANIZACIONAIS ===

create_ou() {
    if [ -z "$OU_NAME" ]; then
        json_response "error" "Nome da OU √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool ou create OU="$OU_NAME"
}

list_ous() {
    execute_samba_command sudo samba-tool ou list
}

delete_ou() {
    if [ -z "$OU_NAME" ]; then
        json_response "error" "Nome da OU √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool ou delete OU="$OU_NAME"
}

list_ou_objects() {
    if [ -z "$OU_NAME" ]; then
        json_response "error" "Nome da OU √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool ou listobjects OU="$OU_NAME"
}

# === FUN√á√ïES DE SILOS ===

create_silo() {
    if [ -z "$SILO_NAME" ]; then
        json_response "error" "Nome do silo √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool domain auth silo create --name "$SILO_NAME"
}

list_silos() {
    execute_samba_command sudo samba-tool domain auth silo list
}

check_silo() {
    if [ -z "$SILO_NAME" ]; then
        json_response "error" "Nome do silo √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool domain auth silo view --name "$SILO_NAME"
}

delete_silo() {
    if [ -z "$SILO_NAME" ]; then
        json_response "error" "Nome do silo √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool domain auth silo delete --name "$SILO_NAME"
}

list_silo_users() {
    if [ -z "$SILO_NAME" ]; then
        json_response "error" "Nome do silo √© obrigat√≥rio"
        return
    fi

    execute_samba_command sudo samba-tool domain auth silo member list --name "$SILO_NAME"
}

add_user_silo() {
    if [ -z "$USERNAME" ] || [ -z "$SILO_NAME" ]; then
        json_response "error" "Username e nome do silo s√£o obrigat√≥rios"
        return
    fi

    execute_samba_command sudo samba-tool domain auth silo member add --name "$SILO_NAME" --member "$USERNAME"
}

remove_user_silo() {
    if [ -z "$USERNAME" ] || [ -z "$SILO_NAME" ]; then
        json_response "error" "Username e nome do silo s√£o obrigat√≥rios"
        return
    fi

    execute_samba_command sudo samba-tool domain auth silo member remove --name "$SILO_NAME" --member "$USERNAME"
}

password_expiry() {
    if [ -z "$USERNAME" ]; then
        echo "Erro: Nome do usu√°rio √© obrigat√≥rio"
        return
    fi

    # Valida√ß√£o
    user_check=$(sudo samba-tool user list 2>/dev/null | grep -x "$USERNAME")
    if [ "$user_check" != "$USERNAME" ]; then
        echo "Erro: Usu√°rio '$USERNAME' n√£o encontrado no dom√≠nio"
        return
    fi

    # Esta fun√ß√£o √© chamada pelos bot√µes SIM/N√ÉO do JavaScript
    # Configurar para N√ÉO expirar
    result=$(sudo samba-tool user setexpiry "$USERNAME" --noexpiry 2>&1)
    exit_code=$?

    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ Senha de $USERNAME configurada para NUNCA EXPIRAR"
        echo ""
        echo "üîê Status: Flag --noexpiry ativada"
    else
        echo "‚ùå Erro: $result"
    fi
}

password_expiry_days() {
    if [ -z "$USERNAME" ] || [ -z "$DAYS" ]; then
        echo "Erro: Username e dias s√£o obrigat√≥rios"
        return
    fi

    # Valida√ß√£o
    user_check=$(sudo samba-tool user list 2>/dev/null | grep -x "$USERNAME")
    if [ "$user_check" != "$USERNAME" ]; then
        echo "Erro: Usu√°rio '$USERNAME' n√£o encontrado no dom√≠nio"
        return
    fi

    echo "üîç Configurando expira√ß√£o individual para: $USERNAME"
    echo ""
    echo "‚ö†Ô∏è IMPORTANTE: No Samba, s√≥ √© poss√≠vel definir expira√ß√£o de CONTA individual"
    echo "   Para expira√ß√£o de SENHA individual, seria necess√°rio alterar toda a pol√≠tica do dom√≠nio"
    echo ""

    # Verificar pol√≠tica atual
    max_pwd_age=$(sudo samba-tool domain passwordsettings show 2>/dev/null | grep -i "Maximum password age" | grep -o '[0-9]*' | head -1)
    echo "üìã Pol√≠tica atual de senhas do dom√≠nio: $max_pwd_age dias"
    echo ""

    # Executar comando
    result=$(sudo samba-tool user setexpiry "$USERNAME" --days="$DAYS" 2>&1)
    exit_code=$?

    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ CONTA de $USERNAME configurada para expirar em $DAYS dias"
        echo ""
        
        # Calcular data
        expiry_date=$(date -d "+$DAYS days" '+%d/%m/%Y')
        echo "üìä RESUMO:"
        echo "   üë§ Usu√°rio: $USERNAME"
        echo "   üè¢ CONTA expira: $expiry_date ($DAYS dias)"
        echo "   üîê SENHA expira: Segue pol√≠tica do dom√≠nio ($max_pwd_age dias ap√≥s altera√ß√£o)"
        echo ""
        echo "üí° DIFEREN√áA:"
        echo "   ‚Ä¢ Conta expirada = usu√°rio n√£o consegue fazer login"
        echo "   ‚Ä¢ Senha expirada = usu√°rio deve trocar a senha no pr√≥ximo login"
    else
        echo "‚ùå Erro: $result"
    fi
}

force_password_change() {
    if [ -z "$USERNAME" ]; then
        echo "Erro: Nome do usu√°rio √© obrigat√≥rio"
        return
    fi

    # Valida√ß√£o
    user_check=$(sudo samba-tool user list 2>/dev/null | grep -x "$USERNAME")
    if [ "$user_check" != "$USERNAME" ]; then
        echo "Erro: Usu√°rio '$USERNAME' n√£o encontrado no dom√≠nio"
        return
    fi

    # M√©todo 1: Usar pwdmustchangenow
    result1=$(sudo net sam set pwdmustchangenow "$USERNAME" yes 2>&1)
    
    # M√©todo 2: Definir expira√ß√£o para 0 dias (backup)
    result2=$(sudo samba-tool user setexpiry "$USERNAME" --days=0 2>&1)

    echo "‚úÖ Usu√°rio $USERNAME ser√° OBRIGADO a trocar senha no pr√≥ximo login"
    echo ""
    echo "üîÑ M√©todo 1 (pwdmustchangenow): $result1"
    echo "üîÑ M√©todo 2 (setexpiry 0): Aplicado como backup"
    echo "‚ö†Ô∏è Status: Senha expira IMEDIATAMENTE"
}

set_no_expiry() {
    if [ -z "$USERNAME" ]; then
        echo "Erro: Nome do usu√°rio √© obrigat√≥rio"
        return
    fi

    user_check=$(sudo samba-tool user list 2>/dev/null | grep -x "$USERNAME")
    if [ "$user_check" != "$USERNAME" ]; then
        echo "Erro: Usu√°rio '$USERNAME' n√£o encontrado no dom√≠nio"
        return
    fi

    result=$(sudo samba-tool user setexpiry "$USERNAME" --noexpiry 2>&1)
    exit_code=$?

    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ Senha de $USERNAME configurada para NUNCA EXPIRAR"
        echo ""
        echo "üîê Status: Flag --noexpiry ativada"
    else
        echo "‚ùå Erro: $result"
    fi
}

set_default_expiry() {
    if [ -z "$USERNAME" ]; then
        echo "Erro: Nome do usu√°rio √© obrigat√≥rio"
        return
    fi

    user_check=$(sudo samba-tool user list 2>/dev/null | grep -x "$USERNAME")
    if [ "$user_check" != "$USERNAME" ]; then
        echo "Erro: Usu√°rio '$USERNAME' n√£o encontrado no dom√≠nio"
        return
    fi

    # Definir para 90 dias (remove automaticamente --noexpiry)
    result=$(sudo samba-tool user setexpiry "$USERNAME" --days=90 2>&1)
    exit_code=$?

    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ Senha de $USERNAME configurada para expirar em 90 dias"
        echo ""
        expiry_date=$(date -d "+90 days" '+%d/%m/%Y')
        echo "üìÖ Data de expira√ß√£o: $expiry_date"
        echo "üîê Status: Flag --noexpiry removida"
    else
        echo "‚ùå Erro: $result"
    fi
}

# === FUN√á√ïES DE INFORMA√á√ïES DO DOM√çNIO ===

show_domain_info() {
    execute_samba_command sudo samba-tool domain info 127.0.0.1
}

show_domain_level() {
    execute_samba_command sudo samba-tool domain level show
}

show_fsmo_roles() {
    execute_samba_command sudo samba-tool fsmo show
}

show_sites() {
    execute_samba_command sudo samba-tool sites list
}

show_replication_info() {
    execute_samba_command sudo samba-tool drs showrepl
}

active_sessions() {
    execute_samba_command net status sessions
}

active_shares() {
    execute_samba_command net status shares
}

samba_processes() {
    execute_samba_command sudo samba-tool processes
}

# === FUN√á√ïES DE COMPARTILHAMENTOS - VERS√ÉO ROBUSTA ===

# === FUN√á√ïES DE COMPARTILHAMENTOS COM SUDO (Seguindo o padr√£o do c√≥digo original) ===

show_shares() {
    # Verificar se o diret√≥rio existe
    if [ -d "/etc/samba/external/smb.conf.d/" ]; then
        # Contar compartilhamentos primeiro
        share_count=0
        for conf_file in /etc/samba/external/smb.conf.d/*.conf; do
            if [ -f "$conf_file" ]; then
                share_count=$((share_count + 1))
            fi
        done
        
        if [ $share_count -eq 0 ]; then
            echo "üì≠ Nenhum compartilhamento encontrado em /etc/samba/external/smb.conf.d/"
            echo ""
            echo "üí° Para criar um compartilhamento, use:"
            echo "   Menu ‚Üí Gest√£o de Pastas ‚Üí Criar nova pasta compartilhada"
            return
        fi
        
        echo "üìä COMPARTILHAMENTOS ENCONTRADOS: $share_count"
        echo ""
        
        # Listar cada compartilhamento com formata√ß√£o adequada
        count=0
        for conf_file in /etc/samba/external/smb.conf.d/*.conf; do
            if [ -f "$conf_file" ]; then
                count=$((count + 1))
                share_name=$(basename "$conf_file" .conf)
                
                echo "==========================================="
                echo "üìÇ COMPARTILHAMENTO #$count: $share_name"
                echo "==========================================="
                
                # Verificar se arquivo n√£o est√° vazio
                if [ -s "$conf_file" ]; then
                    # Extrair informa√ß√µes principais primeiro
                    path=$(grep "^path" "$conf_file" | cut -d= -f2- | sed 's/^ *//' | head -1)
                    users=$(grep "^valid users" "$conf_file" | cut -d= -f2- | sed 's/^ *//' | head -1)
                    writable=$(grep "^writable" "$conf_file" | cut -d= -f2- | sed 's/^ *//' | head -1)
                    browsable=$(grep "^browsable" "$conf_file" | cut -d= -f2- | sed 's/^ *//' | head -1)
                    
                    echo "üìÅ Caminho: $path"
                    echo "üë• Usu√°rios: $users"
                    echo "‚úèÔ∏è Grav√°vel: $writable"
                    echo "üëÅÔ∏è Naveg√°vel: $browsable"
                    
                    # Verificar se a pasta existe
                    if [ -n "$path" ] && [ -d "$path" ]; then
                        echo "‚úÖ Pasta existe no disco"
                        if command -v du >/dev/null 2>&1; then
                            folder_size=$(du -sh "$path" 2>/dev/null | cut -f1)
                            echo "üìä Tamanho: $folder_size"
                        fi
                    else
                        echo "‚ùå Pasta n√£o existe no disco!"
                    fi
                    
                    echo ""
                    echo "üîß Configura√ß√£o completa:"
                    echo "-------------------------------------------"
                    cat "$conf_file"
                else
                    echo "‚ö†Ô∏è Arquivo de configura√ß√£o vazio!"
                fi
                
                echo ""
            fi
        done
        
        echo "üåê ACESSO VIA REDE:"
        echo "   \\\\SERVIDOR\\NOME_DO_COMPARTILHAMENTO"
        echo ""
        echo "üîß COMANDOS √öTEIS:"
        echo "   smbclient -L localhost        # Listar compartilhamentos"
        echo "   smbstatus --shares            # Ver conex√µes ativas"
        echo "   testparm                      # Testar configura√ß√£o"
        
    else
        echo "‚ùå Diret√≥rio /etc/samba/external/smb.conf.d/ n√£o existe"
        echo ""
        echo "üîß Criando estrutura..."
        sudo mkdir -p /etc/samba/external/smb.conf.d/
        echo "‚úÖ Estrutura criada. Execute novamente para ver compartilhamentos."
    fi
}

# Fun√ß√£o interna para revalidar (baseada no c√≥digo original) - com sudo
revalidate_shares_internal() {
    echo "üîÑ Gerando includes.conf..."
    
    # Garantir que o diret√≥rio existe
    sudo mkdir -p /etc/samba/external/smb.conf.d/
    
    # M√©todo 1: Tentar o comando original primeiro
    echo "M√©todo 1: Comando original..."
    sudo find /etc/samba/external/smb.conf.d/ -type f -name "*.conf" -print | sed -e 's/^/include = /' | sudo tee /etc/samba/external/includes.conf > /dev/null
    
    # Verificar se funcionou
    if [ -f "/etc/samba/external/includes.conf" ] && [ -s "/etc/samba/external/includes.conf" ]; then
        echo "‚úÖ M√©todo 1 funcionou!"
    else
        echo "‚ö†Ô∏è M√©todo 1 falhou, tentando m√©todo 2..."
        
        # M√©todo 2: Fazer em etapas
        echo "M√©todo 2: Em etapas..."
        
        # Encontrar arquivos
        conf_files=$(sudo find /etc/samba/external/smb.conf.d/ -name "*.conf" -type f)
        
        # Criar includes.conf vazio
        sudo touch /etc/samba/external/includes.conf
        sudo chmod 644 /etc/samba/external/includes.conf
        
        # Limpar arquivo
        sudo tee /etc/samba/external/includes.conf > /dev/null << EOF
# Compartilhamentos din√¢micos - gerado automaticamente
EOF
        
        # Adicionar cada arquivo
        for conf_file in $conf_files; do
            if [ -f "$conf_file" ]; then
                echo "include = $conf_file" | sudo tee -a /etc/samba/external/includes.conf > /dev/null
            fi
        done
        
        echo "‚úÖ M√©todo 2 conclu√≠do!"
    fi
    
    # Mostrar resultado final
    echo ""
    echo "üìÑ Conte√∫do final do includes.conf:"
    echo "=================================="
    if [ -f "/etc/samba/external/includes.conf" ]; then
        cat /etc/samba/external/includes.conf
    else
        echo "‚ùå Arquivo n√£o existe!"
    fi
    echo "=================================="
    
    # Recarregar Samba
    echo ""
    echo "üîß Recarregando Samba..."
    sudo smbcontrol all reload-config 2>/dev/null
    echo "‚úÖ Samba recarregado!"
}

create_share() {
    if [ -z "$SHARE_NAME" ] || [ -z "$SHARE_PATH" ] || [ -z "$SHARE_USERS" ]; then
        echo "Erro: Nome, caminho e usu√°rios s√£o obrigat√≥rios"
        return
    fi

    # Validar se n√£o cont√©m espa√ßos (baseado no c√≥digo original)
    if [[ $SHARE_NAME = *" "* ]] || [[ $SHARE_PATH = *" "* ]] || [[ $SHARE_NAME = "" ]]; then
        echo "Erro: N√£o crie compartilhamentos com espa√ßos nos nomes ou nomes vazios!"
        return
    fi

    # Verificar se j√° existe
    if [ -f "/etc/samba/external/smb.conf.d/$SHARE_NAME.conf" ]; then
        echo "Erro: Um compartilhamento com este nome j√° existe na rede!"
        return
    fi

    # Criar estrutura de diret√≥rios se n√£o existir (com sudo)
    sudo mkdir -p /etc/samba/external/smb.conf.d/

    # Criar a pasta no sistema (baseado no c√≥digo original)
    sudo mkdir -p "/mnt$SHARE_PATH"

    # Criar arquivo de configura√ß√£o (com sudo - usando tee)
    sudo tee "/etc/samba/external/smb.conf.d/$SHARE_NAME.conf" > /dev/null << EOF
[$SHARE_NAME]
path = /mnt$SHARE_PATH
valid users = $SHARE_USERS
admin users = $SHARE_USERS
writable = ${WRITABLE:-yes}
browsable = ${BROWSABLE:-yes}
guest ok = no
create mask = 0777
force create mode = 0777
directory mask = 0777
force directory mode = 0777
EOF

    # Aplicar permiss√µes (sem -R, baseado no c√≥digo original)
    sudo chmod 777 "/mnt$SHARE_PATH"

    # Revalidar configura√ß√µes
    revalidate_shares_internal

    echo "‚úÖ Compartilhamento '$SHARE_NAME' criado com sucesso!"
    echo "üìÅ Pasta: /mnt$SHARE_PATH"
    echo "üë• Usu√°rios: $SHARE_USERS"
    echo "üìù Configura√ß√£o salva em: /etc/samba/external/smb.conf.d/$SHARE_NAME.conf"
}

create_sync_share() {
    if [ -z "$SHARE_NAME" ] || [ -z "$SHARE_PATH" ] || [ -z "$SHARE_USERS" ]; then
        echo "Erro: Nome, caminho e usu√°rios s√£o obrigat√≥rios"
        return
    fi

    # Validar se n√£o cont√©m espa√ßos
    if [[ $SHARE_NAME = *" "* ]] || [[ $SHARE_PATH = *" "* ]] || [[ $SHARE_NAME = "" ]]; then
        echo "Erro: N√£o crie compartilhamentos com espa√ßos nos nomes ou nomes vazios!"
        return
    fi

    # Verificar se j√° existe
    if [ -f "/etc/samba/external/smb.conf.d/$SHARE_NAME.conf" ]; then
        echo "Erro: Um compartilhamento com este nome j√° existe na rede!"
        return
    fi

    # Criar estrutura de diret√≥rios se n√£o existir (com sudo)
    sudo mkdir -p /etc/samba/external/smb.conf.d/

    # Criar a pasta no sistema
    sudo mkdir -p "/mnt$SHARE_PATH"

    # Criar arquivo de configura√ß√£o para Sync (com sudo - usando tee)
    sudo tee "/etc/samba/external/smb.conf.d/$SHARE_NAME.conf" > /dev/null << EOF
[$SHARE_NAME]
path = /mnt$SHARE_PATH
valid users = $SHARE_USERS
browsable = ${BROWSABLE:-no}
writable = yes
guest ok = no
create mask = 0700
force create mode = 0700
directory mask = 0700
force directory mode = 0700
EOF

    # Aplicar permiss√µes (sem -R, baseado no c√≥digo original)
    sudo chmod 777 "/mnt$SHARE_PATH"

    # Revalidar configura√ß√µes
    revalidate_shares_internal

    echo "‚úÖ Compartilhamento Sync '$SHARE_NAME' criado com sucesso!"
    echo "üìÅ Pasta: /mnt$SHARE_PATH"
    echo "üë• Usu√°rios: $SHARE_USERS"
    echo "üîí Tipo: Estruturado para Sync Center"
    echo "üìù Configura√ß√£o salva em: /etc/samba/external/smb.conf.d/$SHARE_NAME.conf"
}

delete_share() {
    if [ -z "$SHARE_NAME" ]; then
        echo "Erro: Nome do compartilhamento √© obrigat√≥rio"
        return
    fi

    # Verificar se o arquivo de configura√ß√£o existe
    if [ ! -f "/etc/samba/external/smb.conf.d/$SHARE_NAME.conf" ]; then
        echo "Erro: O compartilhamento '$SHARE_NAME' n√£o existe!"
        return
    fi

    # Obter caminho da pasta antes de remover (para informar ao usu√°rio)
    share_path=$(grep "^path" "/etc/samba/external/smb.conf.d/$SHARE_NAME.conf" | cut -d= -f2 | tr -d ' ')

    # Remover APENAS o arquivo de configura√ß√£o (n√£o a pasta) - com sudo
    sudo rm "/etc/samba/external/smb.conf.d/$SHARE_NAME.conf"

    # Revalidar configura√ß√µes
    revalidate_shares_internal

    echo "‚úÖ Compartilhamento '$SHARE_NAME' removido com sucesso!"
    echo "üìÅ Pasta '$share_path' foi PRESERVADA no disco"
    echo "üóëÔ∏è Apenas a configura√ß√£o de compartilhamento foi removida"
    echo ""
    echo "üí° Para remover a pasta tamb√©m, execute manualmente:"
    echo "   rm -rf '$share_path'"
}

revalidate_shares() {
    echo "üîÑ Revalidando configura√ß√µes de compartilhamento..."
    
    # Verificar se diret√≥rio existe (criar com sudo se necess√°rio)
    if [ ! -d "/etc/samba/external/smb.conf.d/" ]; then
        echo "‚ö†Ô∏è Criando estrutura de diret√≥rios..."
        sudo mkdir -p /etc/samba/external/smb.conf.d/
    fi
    
    # Executar revalida√ß√£o
    revalidate_shares_internal
    
    echo "‚úÖ Configura√ß√µes revalidadas com sucesso!"
    echo "üìã Arquivo includes.conf atualizado"
    echo "üîß Samba recarregado"
}

# FIM DOS COMPARTILHAMENTOS

copy_group_members() {
    if [ -z "$SOURCE_GROUP" ] || [ -z "$TARGET_GROUP" ]; then
        echo "‚ùå Erro: Grupo de origem e destino s√£o obrigat√≥rios"
        return
    fi

    log_action "Copiando membros de $SOURCE_GROUP para $TARGET_GROUP"

    # Valida√ß√µes
    source_check=$(sudo samba-tool group list 2>/dev/null | grep -x "$SOURCE_GROUP")
    if [ "$source_check" != "$SOURCE_GROUP" ]; then
        echo "‚ùå Erro: Grupo de origem '$SOURCE_GROUP' n√£o encontrado"
        return
    fi

    target_check=$(sudo samba-tool group list 2>/dev/null | grep -x "$TARGET_GROUP")
    if [ "$target_check" != "$TARGET_GROUP" ]; then
        echo "‚ùå Erro: Grupo de destino '$TARGET_GROUP' n√£o encontrado"
        return
    fi

    if [ "$SOURCE_GROUP" = "$TARGET_GROUP" ]; then
        echo "‚ùå Erro: Grupo de origem e destino n√£o podem ser iguais"
        return
    fi

    echo "üîç Analisando grupo '$SOURCE_GROUP'..."
    
    # Obter membros do grupo origem
    members_result=$(sudo samba-tool group listmembers "$SOURCE_GROUP" 2>/dev/null)
    if [ -z "$members_result" ]; then
        echo "‚ö†Ô∏è Grupo '$SOURCE_GROUP' n√£o possui membros para copiar"
        return
    fi

    # Contar membros
    member_count=$(echo "$members_result" | grep -v '^$' | wc -l)
    echo "üìä Encontrados $member_count membros no grupo origem"
    echo ""

    echo "üìã Membros que ser√£o copiados:"
    echo "$members_result" | sed 's/^/   üî∏ /'
    echo ""

    # Obter membros atuais do grupo destino (para evitar duplicatas)
    existing_members=$(sudo samba-tool group listmembers "$TARGET_GROUP" 2>/dev/null)
    
    echo "üöÄ Iniciando processo de c√≥pia..."
    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

    success_count=0
    skip_count=0
    error_count=0

    # Processar cada membro
    echo "$members_result" | while IFS= read -r member; do
        if [ -n "$member" ]; then
            # Verificar se j√° existe
            if echo "$existing_members" | grep -q "^$member$"; then
                echo "‚ö†Ô∏è '$member' j√° existe no grupo destino - ignorando"
                skip_count=$((skip_count + 1))
            else
                echo "‚ûï Adicionando '$member'..."
                
                add_result=$(sudo samba-tool group addmembers "$TARGET_GROUP" "$member" 2>&1)
                if [ $? -eq 0 ]; then
                    echo "   ‚úÖ Adicionado com sucesso!"
                    success_count=$((success_count + 1))
                else
                    echo "   ‚ùå Erro: $add_result"
                    error_count=$((error_count + 1))
                fi
            fi
        fi
    done

    echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
    echo "üèÅ OPERA√á√ÉO CONCLU√çDA!"
    echo ""
    echo "üìä ESTAT√çSTICAS FINAIS:"
    
    # Verificar membros finais do grupo destino
    final_members=$(sudo samba-tool group listmembers "$TARGET_GROUP" 2>/dev/null)
    final_count=$(echo "$final_members" | grep -v '^$' | wc -l)
    
    echo "   üë• Grupo origem: $SOURCE_GROUP ($member_count membros)"
    echo "   üë• Grupo destino: $TARGET_GROUP ($final_count membros)"
    echo "   ‚úÖ Membros adicionados: Processo executado"
    echo "   ‚ö†Ô∏è Membros j√° existentes: Ignorados automaticamente"
    echo ""
    echo "üéØ RESULTADO: Membros de '$SOURCE_GROUP' copiados para '$TARGET_GROUP'"
    echo ""
    echo "üí° Para verificar o resultado final:"
    echo "   Execute: 'Exibir membros de um grupo' ‚Üí '$TARGET_GROUP'"
}

# === FUN√á√ïES DE CONFIGURA√á√ïES ===

show_password_policy() {
    execute_samba_command sudo samba-tool domain passwordsettings show
}

enable_complexity() {
    sudo samba-tool domain passwordsettings set --complexity=on
    sudo samba-tool domain passwordsettings set --history-length=24
    sudo samba-tool domain passwordsettings set --min-pwd-age=1
    sudo samba-tool domain passwordsettings set --max-pwd-age=90
    sudo samba-tool domain passwordsettings set --min-pwd-length=7
    json_response "success" "Complexidade de senhas ativada"
}

disable_complexity() {
    sudo samba-tool domain passwordsettings set --complexity=off
    sudo samba-tool domain passwordsettings set --history-length=0
    sudo samba-tool domain passwordsettings set --min-pwd-age=0
    sudo samba-tool domain passwordsettings set --max-pwd-age=0
    sudo samba-tool domain passwordsettings set --min-pwd-length=0
    json_response "success" "Complexidade de senhas desativada"
}

sysvol_check() {
    execute_samba_command sudo samba-tool ntacl sysvolcheck -U administrator
}

sysvol_reset() {
    execute_samba_command sudo samba-tool ntacl sysvolreset -U Administrator
}

db_check_general() {
    execute_samba_command sudo samba-tool dbcheck --cross-ncs --fix --yes
}

db_check_acls() {
    execute_samba_command sudo samba-tool dbcheck --cross-ncs --reset-well-known-acls --fix --yes
}

check_acl() {
    execute_samba_command sudo samba-tool gpo aclcheck -U Administrator
}

update_menu() {
    wget -q https://raw.githubusercontent.com/urbancompasspony/server/main/dominio -O /root/.dominio
    chmod +x /root/.dominio
    json_response "success" "Menu atualizado com sucesso"
}

# === FUN√á√ïES DE POL√çTICA DE SENHA INDIVIDUAIS ===

set_password_history() {
    if [ -z "$HISTORY_LENGTH" ]; then
        echo "Erro: Tamanho do hist√≥rico √© obrigat√≥rio"
        return
    fi

    echo "üîç Configurando hist√≥rico de senhas para: $HISTORY_LENGTH senhas"
    echo ""

    # Validar valor
    if [ "$HISTORY_LENGTH" -lt 0 ] || [ "$HISTORY_LENGTH" -gt 1024 ]; then
        echo "‚ùå Erro: Valor deve estar entre 0 e 1024"
        return
    fi

    # Executar comando
    result=$(sudo samba-tool domain passwordsettings set --history-length="$HISTORY_LENGTH" 2>&1)
    exit_code=$?

    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ Hist√≥rico de senhas configurado para $HISTORY_LENGTH senhas"
        echo ""
        
        if [ "$HISTORY_LENGTH" -eq 0 ]; then
            echo "‚ö†Ô∏è CONFIGURA√á√ÉO: Usu√°rios podem reutilizar a mesma senha imediatamente"
            echo "üîì SEGURAN√áA: Baixa (n√£o recomendado para ambientes corporativos)"
        else
            echo "üîê CONFIGURA√á√ÉO: Usu√°rios devem criar $HISTORY_LENGTH senhas diferentes antes de reutilizar"
            echo "‚úÖ SEGURAN√áA: Melhorada"
        fi
        
        echo ""
        echo "üí° EFEITO: Aplica-se a TODOS os usu√°rios do dom√≠nio"
        
    else
        echo "‚ùå Erro ao configurar hist√≥rico: $result"
    fi
}

set_password_min_length() {
    if [ -z "$MIN_LENGTH" ]; then
        echo "Erro: Tamanho m√≠nimo √© obrigat√≥rio"
        return
    fi

    echo "üîç Configurando tamanho m√≠nimo de senhas para: $MIN_LENGTH caracteres"
    
    result=$(sudo samba-tool domain passwordsettings set --min-pwd-length="$MIN_LENGTH" 2>&1)
    exit_code=$?

    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ Tamanho m√≠nimo de senhas configurado para $MIN_LENGTH caracteres"
        echo ""
        
        if [ "$MIN_LENGTH" -eq 0 ]; then
            echo "‚ö†Ô∏è AVISO: Senhas podem estar vazias (muito inseguro)"
        elif [ "$MIN_LENGTH" -lt 8 ]; then
            echo "‚ö†Ô∏è AVISO: Tamanho abaixo do recomendado (m√≠nimo 8 caracteres)"
        else
            echo "‚úÖ SEGURAN√áA: Tamanho adequado"
        fi
        
    else
        echo "‚ùå Erro: $result"
    fi
}

set_password_min_age() {
    if [ -z "$MIN_AGE" ]; then
        echo "Erro: Validade m√≠nima √© obrigat√≥ria"
        return
    fi

    echo "üîç Configurando validade m√≠nima de senhas para: $MIN_AGE dias"
    
    result=$(sudo samba-tool domain passwordsettings set --min-pwd-age="$MIN_AGE" 2>&1)
    exit_code=$?

    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ Validade m√≠nima configurada para $MIN_AGE dias"
        echo ""
        
        if [ "$MIN_AGE" -eq 0 ]; then
            echo "üîì CONFIGURA√á√ÉO: Usu√°rios podem trocar senha imediatamente"
        else
            echo "üîê CONFIGURA√á√ÉO: Usu√°rios devem esperar $MIN_AGE dias para trocar senha novamente"
        fi
        
    else
        echo "‚ùå Erro: $result"
    fi
}

set_password_max_age() {
    if [ -z "$MAX_AGE" ]; then
        echo "Erro: Validade m√°xima √© obrigat√≥ria"
        return
    fi

    echo "üîç Configurando validade m√°xima de senhas para: $MAX_AGE dias"
    
    result=$(sudo samba-tool domain passwordsettings set --max-pwd-age="$MAX_AGE" 2>&1)
    exit_code=$?

    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ Validade m√°xima configurada para $MAX_AGE dias"
        echo ""
        
        if [ "$MAX_AGE" -eq 0 ]; then
            echo "‚àû CONFIGURA√á√ÉO: Senhas nunca expiram"
            echo "‚ö†Ô∏è SEGURAN√áA: Pode ser um risco em ambientes corporativos"
        else
            echo "‚è∞ CONFIGURA√á√ÉO: Senhas expiram ap√≥s $MAX_AGE dias"
            echo "‚úÖ SEGURAN√áA: Usu√°rios ser√£o for√ßados a trocar senhas periodicamente"
        fi
        
    else
        echo "‚ùå Erro: $result"
    fi
}

set_login_attempts() {
    if [ -z "$MAX_ATTEMPTS" ]; then
        echo "Erro: N√∫mero m√°ximo de tentativas √© obrigat√≥rio"
        return
    fi

    echo "üîç Configurando tentativas de login para: $MAX_ATTEMPTS tentativas"
    
    result=$(sudo samba-tool domain passwordsettings set --account-lockout-threshold="$MAX_ATTEMPTS" 2>&1)
    exit_code=$?

    if [ $exit_code -eq 0 ]; then
        echo "‚úÖ Tentativas de login configuradas para $MAX_ATTEMPTS tentativas"
        echo ""
        
        if [ "$MAX_ATTEMPTS" -eq 0 ]; then
            echo "üîì CONFIGURA√á√ÉO: Sem limite de tentativas (contas nunca s√£o bloqueadas)"
            echo "‚ö†Ô∏è SEGURAN√áA: Vulner√°vel a ataques de for√ßa bruta"
        else
            echo "üîí CONFIGURA√á√ÉO: Contas bloqueadas ap√≥s $MAX_ATTEMPTS tentativas incorretas"
            echo "‚úÖ SEGURAN√áA: Protegido contra ataques de for√ßa bruta"
        fi
        
    else
        echo "‚ùå Erro: $result"
    fi
}

# === FUN√á√ÉO PRINCIPAL ===

main() {
    # Parse par√¢metros
    parse_cgi_params
    sanitize_input

    # Log da a√ß√£o
    log_action "A√ß√£o: $ACTION, Usu√°rio: $USERNAME, M√©todo: $REQUEST_METHOD"

    # Executar a√ß√£o baseada no par√¢metro
    case "$ACTION" in
        # Usu√°rios
        "create-user") create_user ;;
        "list-users") list_users ;;
        "search-user") search_user ;;
        "check-user") check_user ;;
        "delete-user") delete_user ;;
        "enable-user") enable_user ;;
        "disable-user") disable_user ;;
        "reset-password") reset_password ;;
        "promote-user") promote_user ;;
        "demote-user") demote_user ;;
        "show-user-groups") show_user_groups ;;
        "move-user-ou") move_user_ou ;;
        "verify-password") verify_password ;;
        "password-expiry") password_expiry ;;
        "password-expiry-days") password_expiry_days ;;
        "force-password-change") force_password_change ;;
        "set-no-expiry") set_no_expiry ;;
        "set-default-expiry") set_default_expiry ;;
        "set-account-expiry") set_account_expiry ;;

        # Grupos
        "create-group") create_group ;;
        "list-groups") list_groups ;;
        "search-group") search_group ;;
        "check-group") check_group ;;
        "delete-group") delete_group ;;
        "add-user-to-group") add_user_to_group ;;
        "remove-user-from-group") remove_user_from_group ;;
        "list-group-members") list_group_members ;;
        "move-group-ou") move_group_ou ;;
        "copy-user-groups") copy_user_groups ;;
        "copy-group-members") copy_group_members ;;
        "list-all-groups") list_all_groups ;;
        "show-group-hierarchy") show_group_hierarchy ;;
        "add-group-to-group") add_group_to_group ;;
        "remove-group-from-group") remove_group_from_group ;;

        # Computadores
        "add-computer") add_computer ;;
        "list-computers") list_computers ;;
        "search-computer") search_computer ;;
        "check-computer") check_computer ;;
        "delete-computer") delete_computer ;;
        "move-computer-ou") move_computer_ou ;;

        # OUs
        "create-ou") create_ou ;;
        "list-ous") list_ous ;;
        "delete-ou") delete_ou ;;
        "list-ou-objects") list_ou_objects ;;

        # Silos
        "create-silo") create_silo ;;
        "list-silos") list_silos ;;
        "check-silo") check_silo ;;
        "delete-silo") delete_silo ;;
        "list-silo-users") list_silo_users ;;
        "add-user-silo") add_user_silo ;;
        "remove-user-silo") remove_user_silo ;;

        # Compartilhamentos
        "show-shares") show_shares ;;
        "create-share") create_share ;;
        "create-sync-share") create_sync_share ;;
        "delete-share") delete_share ;;
        "revalidate-shares") revalidate_shares ;;
        "share-name") SHARE_NAME="$value" ;;
        "share-path") SHARE_PATH="$value" ;;
        "share-users") SHARE_USERS="$value" ;;
        "writable") WRITABLE="$value" ;;
        "browsable") BROWSABLE="$value" ;;

        # Informa√ß√µes do dom√≠nio
        "show-domain-info") show_domain_info ;;
        "show-domain-level") show_domain_level ;;
        "show-fsmo-roles") show_fsmo_roles ;;
        "show-sites") show_sites ;;
        "show-replication-info") show_replication_info ;;
        "active-sessions") active_sessions ;;
        "active-shares") active_shares ;;
        "samba-processes") samba_processes ;;

        # Configura√ß√µes
        "show-password-policy") show_password_policy ;;
        "enable-complexity") enable_complexity ;;
        "disable-complexity") disable_complexity ;;
        "sysvol-check") sysvol_check ;;
        "sysvol-reset") sysvol_reset ;;
        "db-check-general") db_check_general ;;
        "db-check-acls") db_check_acls ;;
        "check-acl") check_acl ;;
        "update-menu") update_menu ;;
        "set-password-history") set_password_history ;;
        "set-password-min-length") set_password_min_length ;;
        "set-password-min-age") set_password_min_age ;;
        "set-password-max-age") set_password_max_age ;;
        "set-login-attempts") set_login_attempts ;;

        *)
            json_response "error" "A√ß√£o n√£o reconhecida: $ACTION"
            ;;
    esac
}

# Executar fun√ß√£o principal
main
